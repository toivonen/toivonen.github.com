{"componentChunkName":"component---src-components-layout-layout-post-js","path":"/en/posts/best-way-to-hide/","result":{"data":{"mdx":{"id":"34c03616-3f69-5fb1-8c85-ebf05bb7aa7e","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"The Best Way to Hide\",\n  \"categories\": \"en issues\",\n  \"old\": true,\n  \"date\": \"2013-10-31T00:00:00.000Z\",\n  \"layout\": \"post\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"There is a well-known front-end pattern which is to have hidden elements in DOM\\nand make them visible when necessary. As with any good pattern, it can be\\ncompromised by wrong implementation.\"), mdx(\"excerpt\", null), mdx(\"p\", null, \"Most times, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"hidden\"), \" means that the DOM element gets a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display: none\"), \" property.\\nThis approach has become even more widespread thanks to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".hide()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".show()\"), \" jQuery helpers.\"), mdx(\"p\", null, \"Whenever you need to hide a visible block you use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".hide()\"), \" helper which in\\ncharge of assigning an inline \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display: none\"), \" style property, making the block\\ninvisible. When it has to become visible again, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".show()\"), \" helper changes the\\ninline CSS \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display\"), \" property.\"), mdx(\"p\", null, \"I believe this is a very nice example of wrong implementation.\"), mdx(\"p\", null, \"The solution unifies all the elements around the world and assumes all of them\\ncan be hidden in the same way. But this assumption is far from reality.\"), mdx(\"p\", null, \"Let us say we have an element in a visible state. Guess what will happen when we\\nuse \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".hide()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".show()\"), \"?\\nYes, an inline style with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display\"), \" property will be added.\\nIn other words, the element will not return back to its original visible state.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"$('.my-block');\\n\\n// <span class=\\\"my-block\\\">..</span>\\n\\n$('.my-block').hide()\\n\\n// <span class=\\\"my-block\\\" style=\\\"display: none;\\\">..</span>\\n\\n$('.my-block').show()\\n\\n// <span class=\\\"my-block\\\" style=\\\"display: block;\\\">..</span>\\n\\n\")), mdx(\"p\", null, \"jQuery is clever enough to detect inline elements. By applying \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".hide()\"), \" and\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".show()\"), \", you get something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"$('.my-block');\\n\\n// <span class=\\\"my-block\\\">...</span>\\n\\n$('.my-block').hide();\\n\\n// <span class=\\\"my-block\\\" style=\\\"display: none;\\\">...</span>\\n\\n$('.my-block').show();\\n\\n// <span class=\\\"my-block\\\" style=\\\"display: inline;\\\">...</span>\\n\\n\")), mdx(\"p\", null, \"Again, the block did not \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"return\"), \" to its original state after being shown. For\\nsure, it became visible, but this state is not equivalent to the original one.\\nAny new CSS class appended to the element with an intention to change its\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display\"), \" property will not work as the inline style rule prevails.\"), mdx(\"p\", null, \"The other problem is that setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display\"), \" property to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"none\"), \" doesn't always\\nwork for making an element invisible. Maybe for some reason it has to be hidden\\nfrom a user with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"left: -9999px\"), \"?\"), mdx(\"p\", null, \"It's only the interface block implementation that should know about all the\\nblock states, including the hidden one.\"), mdx(\"p\", null, \"Modifiers (no matter if you prefer \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://smacss.com/\"\n  }), \"SMACCS\"), \",\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://oocss.org/\"\n  }), \"OOCSS\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://bem.info/\"\n  }), \"BEM\"), \") are designed to express\\nstates of interface components. The same goes for the hidden state.\"), mdx(\"p\", null, \"Every block you would like to hide and show should be equipped with a proper\\nmodifier:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \".my-block_hidden {\\n    display: none;\\n}\\n\")), mdx(\"p\", null, \"Then, by applying this modifier and removing it from a block you can be sure it\\ntransitions into one of its predefined states:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"$('.my-block');\\n\\n// <span class=\\\"my-block\\\">...</span>\\n\\n$('.my-block').addClass('my-block_hidden');\\n\\n// <span class=\\\"my-block my-block_hidden\\\">...</span>\\n\\n$('.my-block').removeClass('my-block_hidden');\\n\\n// <span class=\\\"my-block\\\">...</span>\\n\")), mdx(\"p\", null, \"This enables you to provide any type of hiding, not necessarily \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display: none\"), \",\\nand ensures the block returns to its original visible state when shown again.\"), mdx(\"p\", null, \"If you prefer not to mess with all those \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".addClass()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".removeClass()\"), \"\\nhelpers, you can teach your JavaScript to work with modifiers (e.g. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/varya/bem-js-tutorial/blob/master/02-Modifiers.md\"\n  }), \"as\\nBEM does\\nit\"), \") which\\nwill make your code even better:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"$.block('my-block');\\n\\n// <span class=\\\"my-block\\\">...</span>\\n\\n$.block('my-block').setMod('hidden');\\n\\n// <span class=\\\"my-block my-block_hidden\\\">...</span>\\n\\n$.block('my-block').delMod('hidden');\\n\\n// <span class=\\\"my-block\\\">...</span>\\n\")), mdx(\"p\", null, \"That's all. From now on you are not allowed to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".hide()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".show()\"), \".\\nEven for prototyping :-)\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"readingTime":{"minutes":2.715},"slug":"en/posts/best-way-to-hide/","prefix":"","disqusIdentifier":"en-issues-best-way-to-hide"},"frontmatter":{"title":"The Best Way to Hide","subTitle":null,"date":"31 October 2013","v2":null,"old":true,"tumblr":null,"meta":null,"cover":null}},"site":{"siteMetadata":{"siteUrl":"http://varya.me"}}},"pageContext":{"slug":"en/posts/best-way-to-hide/","prev":{"id":"463f7203-ee8d-5ffb-a005-f4e9f6a6da05","fileAbsolutePath":"/Users/varya/WebDev/Personal/varya.github.com/content/posts/beml-html-preprocessor/index_en.md","fields":{"slug":"en/posts/beml-html-preprocessor/","prefix":"","lang":"en","disqusIdentifier":"en-issues-beml-html-preprocessor","level":1,"fileRelativePath":"beml-html-preprocessor/index_en.md"},"frontmatter":{"title":"BEML - an HTML preprocessor for BEM","subTitle":null,"v2":null,"old":true,"date":"2014-04-09T00:00:00.000Z"}},"next":{"id":"e49885b1-57fd-5300-a897-8a34f68a06aa","fileAbsolutePath":"/Users/varya/WebDev/Personal/varya.github.com/content/posts/blocks-and-bundles/index_en.md","fields":{"slug":"en/posts/blocks-and-bundles/","prefix":"","lang":"en","disqusIdentifier":"en-issues-blocks-and-bundles","level":1,"fileRelativePath":"blocks-and-bundles/index_en.md"},"frontmatter":{"title":"Blocks are bricks, and bundles are buildings","subTitle":null,"v2":null,"old":true,"date":"2014-01-06T00:00:00.000Z"}},"fileSourceUrl":"https://github.com/varya/varya.github.com/edit/develop/content/posts/best-way-to-hide/index_en.md"}}}
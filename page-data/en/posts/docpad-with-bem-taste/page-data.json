{"componentChunkName":"component---src-components-layout-layout-post-js","path":"/en/posts/docpad-with-bem-taste/","result":{"data":{"mdx":{"id":"fa1fd891-7452-5c13-8d73-32f15e44e9a1","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Docpad with the taste of BEM\",\n  \"date\": \"2014-06-04T00:00:00.000Z\",\n  \"v2\": true,\n  \"layout\": \"post\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Let me present a stub for \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"docpad-run\"), \" project with\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"bem-built\"), \" static assets. If you ever wanted to be\\na generic blog holder equiped with nice and neat static\\nfiles, here we go.\"), mdx(\"excerpt\", null), mdx(\"h2\", null, \"How to start\"), mdx(\"p\", null, \"You need install the docpad first. Follow their \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://docpad.org/docs/install\"\n  }), \"Installation Guide\"), \".\"), mdx(\"p\", null, \"Then, the installation of the blog is super short and easy. Clone, fork or\\ncopy from the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/varya/docpad-bem-stub\"\n  }), \"docpad-bem-stub repository\"), \".\\nThen, go though the 3 installation steps:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install\\n./node_modules/bower-npm-install/bin/bower-npm-install\\ndocpad run\\n\")), mdx(\"p\", null, \"With these 3 steps you will get:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a local server with a generic docpad blog;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://bem.info/libs/bem-core/2.2.0/\"\n  }), \"bem-core\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://bem.info/libs/bem-components/v2/\"\n  }), \"bem-components\"), \"\\nlibraries of reusable CSS/JavaScript/templates code;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"fully tuned static-build instructions which run on changes\\nin your source code;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"initial blog structure.\")), mdx(\"h2\", null, \"How to write\"), mdx(\"p\", null, \"In the given structure you can write either pages or blog posts.\\nThe posts are listed in the index page. Once you added a new\\nitem, you can see it in this list and navigate to its page;\\nthe docpad rebuilds from source automatically.\"), mdx(\"p\", null, \"Place the pages as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*.html.md\"), \" files into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/documents/pages\"), \"\\ndirectory. The posts are kept into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/documents/posts\"), \".\"), mdx(\"h2\", null, \"How to develop statics\"), mdx(\"p\", null, \"The statics is developed with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://bem.info/\"\n  }), \"BEM\"), \".\\nYou can get CSS and JavaScript files for your pages in\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"desktop.bundles\"), \" directory. The pages are built with blocks\\nfrom \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"desktop.blocks\"), \" folder.\"), mdx(\"p\", null, \"The rebuild process for statics runs under docpad server.\"), mdx(\"p\", null, \"Sometimes you may prefer to develop static pages separately.\\nFor this run\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"./node_modules/enb/bin/enb server\\n\")), mdx(\"p\", null, \"You will get another server which rebuilds statics. It\\nproduces static html files from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*.bemjson.js\"), \" files in\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"desktop.bundles\"), \". You can develop the layout inserting\\njson there and providing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BEMHTML\"), \" templates for the\\ncorresponding block. Find the documentation about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BEMHTML\"), \"\\nhere:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://bem.info/libs/bem-core/2.2.0/templating/intro/\"\n  }), \"BEMHTML quick start\"))), mdx(\"p\", null, \"For the same blocks you can provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*.css\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*.js\"), \" files\\nand get them built into pages.\"), mdx(\"h2\", null, \"How to publish\"), mdx(\"p\", null, \"The blog is tuned to be deployed on GitHub. Thus, your\\nrepository has to be named as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<username>.github.com\"), \". You\\ncan develop in its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"source\"), \" branch. For deploying on\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<username>.github.io\"), \" host run this command:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docpad deploy-ghpages\\n\")), mdx(\"p\", null, \"This will create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"master\"), \" branch of the repository whose\\nsource is linked to the host.\"), mdx(\"p\", null, \"You can also attach your own domain to the blog like I did.\\nAlso, it is possible to host your blog in differently named\\nrepository. However this will make you to provide changes\\non \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docpad.coffee\"), \" configuration file.\", mdx(\"br\", null), \"\\nStudy \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pages.github.com/\"\n  }), \"Github Pages\"), \" to learn more.\"), mdx(\"h2\", null, \"Why Docpad?\"), mdx(\"p\", null, \"This blog had been running on Jekyll for a while. This was an\\nacceptable soltuion for a quick start. However with the growth\\nof the posts base I started to suffer from not very fast\\nrebuilds. Also, sometimes providing changes into the blog\\nlayout was hard, mostly due to the limitations of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"liquid\"), \"\\ntemplates.\"), mdx(\"p\", null, \"I've decided that \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://docpad.org/\"\n  }), \"Docpad\"), \" should be much\\nbetter alternative. It is served as an npm package, possible to\\nbe extended with plugins and has an active fast-growing\\ndevelopers community.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docpad-bem-stub\"), \" gives you initial structure, from which\\nyou already can write and publish. If you want to provide changes\\ninto the build process, modify the templates or extend with\\nplugins, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://docpad.org/\"\n  }), \"learn at Docpad website\"), \".\"), mdx(\"p\", null, \"Moreover, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://stackoverflow.com/\"\n  }), \"Stackoverflow\"), \" indeed already\\nhas an answer to almost all the questions you have. If not, create a new\\none.\"), mdx(\"h2\", null, \"Why BEM?\"), mdx(\"p\", null, \"BEM is a very flexible modular solution for frontend which\\nenables to develop reusable CSS and JavaScript components. Plus, some code\\ncan be taken from their open source libraries.\"), mdx(\"p\", null, \"You can learn a lot about BEM from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/en/content\"\n  }), \"my articles and talks\"), \"\\nor at the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://bem.info/\"\n  }), \"official BEM site\"), \".\"), mdx(\"h2\", null, \"Inside about\"), mdx(\"p\", null, \"Above I described all you need to know for using your blog. Below there\\nare a little more technical details on what is behind.\"), mdx(\"h3\", null, \"ENB\"), mdx(\"p\", null, \"I use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/enb-make/enb\"\n  }), \"enb\"), \" for building pages with block\\ncomponents. This solution is preferable to bem-tools because of it is much\\nfaster. When rebuilding pages on every change, this is sensetive.\"), mdx(\"h3\", null, \"i-bem.js and modules\"), mdx(\"p\", null, \"I personally love that this solution brings \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i-bem.js\"), \" library to the\\nproject. Hope to demonstrate its amazing capabilities here in near future.\\nBut before I stuff my blog with complex JavaScript components, you\\ncan see some examples and very detailed explanations in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://bem.info/tutorials/bem-js-tutorial/\"\n  }), \"Step-by-step tutorial on\\ni-bem.js\"), \".\"), mdx(\"p\", null, \"Another JavaScript feature you can enjoy is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/en/issues/ym-modular-system\"\n  }), \"YM modular system\"), \".\\nThese are JavaScript modules with asynchronious resolving.\"), mdx(\"h3\", null, \"BEMHTML\"), mdx(\"p\", null, \"As mentioned above, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BEMHTML\"), \" is a templating solution. Being JavaScript-based,\\nthese templates can be applied on both server and client side. There are\\na couple of documents for a deeper dive into it here:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://bem.info/libs/bem-core/2.2.0/templating/rationale/\"\n  }), \"BEMHTML templates description\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://bem.info/libs/bem-core/2.2.0/templating/reference/\"\n  }), \"BEMHTML tutorial\"))), mdx(\"h3\", null, \"bem-core and bem-components\"), mdx(\"p\", null, \"BEM is also nice for a possibility to borrow the components from libraries.\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docpad-bem-stub\"), \" uses 2 now available libraries:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://bem.info/libs/bem-core/2.2.0/\"\n  }), \"bem-core\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://bem.info/libs/bem-components/v2/\"\n  }), \"bem-components\"))), mdx(\"p\", null, \"I hope to see more in the future.\"), mdx(\"h2\", null, \"What next?\"), mdx(\"p\", null, \"Indeed everything can be improved. These are my thoughts on how\\nto continue.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"detect changes in static files\", mdx(\"br\", null), \"\\nDocpad watches over the changes in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src\"), \" directory. This means that\\nwhen developing statics you will not get the rebuild. I am thinking\\non running \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"enb server\"), \" under \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docpad run\"), \" and proxy. This maybe\\nbetter than watch over a lot of files in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"desktop.blocks\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"desktop.bundles\"), \"\\nand all the libraries.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"css preprocessors\", mdx(\"br\", null), \"\\nThe blog styles are in pure CSS now. But with a little\\nchange into enb configuration we can learn it to build with\\npreprocessors.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"fresh design\", mdx(\"br\", null), \"\\nCreating a simple layout is the most difficult design task. Don't you agree?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"nice initial posts\", mdx(\"br\", null), \"\\nThis is even harder than the desing tasks but I think the users feel much\\nmore comfortable when getting a blog with predefined texts.\")), mdx(\"p\", null, \"If you feel your oats and want to do your bit, fork \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/varya/docpad-bem-stub\"\n  }), \"the repository\"), \"\\nand start :-)\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"readingTime":{"minutes":4.86},"slug":"en/posts/docpad-with-bem-taste/","prefix":"","disqusIdentifier":"posts-docpad-with-bem-taste-index-en"},"frontmatter":{"title":"Docpad with the taste of BEM","subTitle":null,"date":"04 June 2014","v2":true,"old":null,"tumblr":null,"meta":null,"cover":null}},"site":{"siteMetadata":{"siteUrl":"http://varya.me"}}},"pageContext":{"slug":"en/posts/docpad-with-bem-taste/","prev":{"id":"cfe1845e-9b45-57f4-b6a4-d738d926d20d","fileAbsolutePath":"/Users/varya/WebDev/Personal/varya.github.com/content/posts/dealing-atomically-with-icon-fonts/index_en.md","fields":{"slug":"en/posts/dealing-atomically-with-icon-fonts/","prefix":"","lang":"en","disqusIdentifier":"posts-dealing-atomically-with-icon-fonts-index-en","level":1,"fileRelativePath":"dealing-atomically-with-icon-fonts/index_en.md"},"frontmatter":{"title":"Dealing atomically with icon fonts","subTitle":null,"v2":true,"old":null,"date":"2015-11-10T00:00:00.000Z"}},"next":{"id":"eaf13c81-98c4-5dfb-bc60-f3f3d1247b5a","fileAbsolutePath":"/Users/varya/WebDev/Personal/varya.github.com/content/posts/first-steroids-app/index_ru.md","fields":{"slug":"ru/posts/first-steroids-app/","prefix":"","lang":"ru","disqusIdentifier":"ru-issues-first-steroids-app","level":1,"fileRelativePath":"first-steroids-app/index_ru.md"},"frontmatter":{"title":"Мобильное приложение на Steroids","subTitle":null,"v2":null,"old":true,"date":"2014-04-02T00:00:00.000Z"}},"fileSourceUrl":"https://github.com/varya/varya.github.com/edit/develop/content/posts/docpad-with-bem-taste/index_en.md"}}}
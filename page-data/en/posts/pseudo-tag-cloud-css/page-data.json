{"componentChunkName":"component---src-components-layout-layout-post-js","path":"/en/posts/pseudo-tag-cloud-css/","result":{"data":{"mdx":{"id":"f8947235-cff3-51b7-ac8b-aad5efe4c814","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tag cloud of random sizes in pure CSS\",\n  \"date\": \"2015-11-02T00:00:00.000Z\",\n  \"v2\": true,\n  \"cover\": \"thumb.png\",\n  \"layout\": \"post\",\n  \"meta\": {\n    \"desc\": \"Tag cloud of different with random sizes of the words with pure CSS.\\n\"\n  }\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Last week I faced a need to make a fake tag cloud, where the words need to be of different size. This was needed for\\na presentation slide, and as my slides are always in HTML/CSS, must be implemented with these technologies. It is always\\npossible to inject some JavaScript and code anything. But what about pure CSS, do we get random sizes there?\"), mdx(\"excerpt\", null), mdx(\"div\", {\n    className: \"testings\",\n    markdown: \"1\"\n  }, mdx(\"ul\", {\n    className: \"cloud\"\n  }, mdx(\"li\", null, \"performance testing\"), mdx(\"li\", null, \"stress testing\"), mdx(\"li\", null, \"conformance testing\"), mdx(\"li\", null, \"acceptane testing\"), mdx(\"li\", null, \"smoke testing\"), mdx(\"li\", null, \"regression testing\"), mdx(\"li\", null, \"white box testing\"), mdx(\"li\", null, \"functional testing\"), mdx(\"li\", null, \"system testing\"), mdx(\"li\", null, \"black box testing\"), mdx(\"li\", null, \"load testing\"), mdx(\"li\", null, \"compatibility testing\"), mdx(\"li\", null, \"unit testing\"))), mdx(PureHtml, {\n    html: \"<style>\\n.testings {\\n    text-align: center;\\n    width: 400px;\\n}\\n.testings .cloud {\\n    display: inline;\\n    list-style-type: none;\\n    width: 400px;\\n}\\n.testings .cloud li {\\n    list-style: none;\\n    display: inline;\\n}\\n.testings .cloud li:nth-of-type(3n + 1) {\\n    font-size: 1.25em;\\n}\\n.testings .cloud li:nth-of-type(4n+3) {\\n    font-size: 1.5em;\\n}\\n.testings .cloud li:nth-of-type(5n - 3) {\\n    font-size: 1em;\\n}\\n</style>\",\n    mdxType: \"PureHtml\"\n  }), mdx(\"p\", null, \"The tag cloud you see above is what I get. You may notice it's not real random; after refreshing you will always get the\\nsame result. But still looks like a tag cloud of different sizes and works perfectly as an example.\"), mdx(\"p\", null, \"This is a list, it's easy to generate from markdown:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<ul class=\\\"cloud\\\">\\n    <li>performance testing</li>\\n    <li>stress testing</li>\\n    <li>conformance testing</li>\\n    <li>acceptane testing</li>\\n    <li>smoke testing</li>\\n    ...\\n</ul>\\n\")), mdx(\"p\", null, \"Then, flattened as usual:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \".cloud {\\n    display: inline;\\n    list-style-type: none;\\n    width: 400px;\\n}\\n.cloud li {\\n    list-style: none;\\n    display: inline;\\n}\\n\")), mdx(\"p\", null, \"And then different sizes are made with a few \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nth-of-type\"), \" combined in different variants:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \".cloud li:nth-of-type(3n + 1) {\\n    font-size: 1.25em;\\n}\\n.cloud li:nth-of-type(4n+3) {\\n    font-size: 1.5em;\\n}\\n.cloud li:nth-of-type(5n - 3) {\\n    font-size: 1em;\\n}\\n\")), mdx(\"p\", null, \"I tuned the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nth-of-type\"), \" values so that it would look nicely. Depending on the length of the words used, you may need\\nto play arownd with the values and maybe use more than 3 sizes.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"readingTime":{"minutes":1.785},"slug":"en/posts/pseudo-tag-cloud-css/","prefix":"","disqusIdentifier":"posts-pseudo-tag-cloud-css-index-en"},"frontmatter":{"title":"Tag cloud of random sizes in pure CSS","subTitle":null,"date":"02 November 2015","v2":true,"old":null,"tumblr":null,"meta":{"desc":"Tag cloud of different with random sizes of the words with pure CSS.\n"},"cover":{"childImageSharp":{"resize":{"src":"/static/56dd12d33db3da0cf256e530f31c2600/630fb/thumb.png"}}}}},"site":{"siteMetadata":{"siteUrl":"http://varya.me"}}},"pageContext":{"slug":"en/posts/pseudo-tag-cloud-css/","prev":{"id":"ca34e748-a84d-5c2b-acb6-d00e6dfc02b3","fileAbsolutePath":"/Users/varya/WebDev/Personal/varya.github.com/content/posts/platforms-create-value/index.md","fields":{"slug":"blog/platforms-create-value/","prefix":"","lang":"en","disqusIdentifier":"blog-platforms-create-value","level":1,"fileRelativePath":"platforms-create-value/index.md"},"frontmatter":{"title":"How business platforms can create new value?","subTitle":null,"v2":null,"old":null,"date":"2019-04-30T00:00:00.000Z","layout":"post"}},"next":{"id":"69c762b4-a179-55f0-8f78-5bab1d0ab9a1","fileAbsolutePath":"/Users/varya/WebDev/Personal/varya.github.com/content/posts/react-angular-project/index_en.md","fields":{"slug":"en/posts/react-angular-project/","prefix":"","lang":"en","disqusIdentifier":"posts-react-angular-project-index-en","level":1,"fileRelativePath":"react-angular-project/index_en.md"},"frontmatter":{"title":"Simple React Angular project","subTitle":null,"v2":true,"old":null,"date":"2016-05-19T00:00:00.000Z","layout":"post"}},"fileSourceUrl":"https://github.com/varya/varya.github.com/edit/develop/content/posts/pseudo-tag-cloud-css/index_en.md"}}}
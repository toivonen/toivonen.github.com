{"version":3,"sources":["webpack:///path---en-posts-sc-5-style-guide-next-level-5a2bdc9a2ebc25fe441f.js","webpack:///./.cache/json/en-posts-sc-5-style-guide-next-level.json"],"names":["webpackJsonp","593","module","exports","data","post","id","html","fields","slug","prefix","disqusIdentifier","frontmatter","title","date","v2","old","tumblr","meta","desc","cover","childImageSharp","resize","src","authornote","site","siteMetadata","siteUrl","pathContext","prev","lang","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,GAAA,wIAAAC,KAAA,0xaAAu1XC,QAAmuDC,KAAA,uCAAAC,OAAA,GAAAC,iBAAA,6CAAyHC,aAAgBC,MAAA,wCAAAC,KAAA,cAAAC,IAAA,EAAAC,IAAA,KAAAC,OAAA,KAAAC,MAAgHC,KAAA,sKAA4KC,OAAUC,iBAAmBC,QAAUC,IAAA,gEAAqEC,YAAelB,GAAA,2GAAAC,KAAA,kSAA0ZkB,MAASC,cAAgBC,QAAA,sBAA+BC,aAAgBnB,KAAA,uCAAAoB,MAAsDvB,GAAA,yIAAAE,QAAwJC,KAAA,wCAAAC,OAAA,GAAAoB,KAAA,KAAAnB,iBAAA,8CAAuIC,aAAgBC,MAAA,mCAA0CkB,MAASzB,GAAA,wIAAAE,QAAuJC,KAAA,uCAAAC,OAAA,GAAAoB,KAAA,KAAAnB,iBAAA,6CAAqIC,aAAgBC,MAAA","file":"path---en-posts-sc-5-style-guide-next-level-5a2bdc9a2ebc25fe441f.js","sourcesContent":["webpackJsonp([217487980924903],{\n\n/***/ 593:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"id\":\"/Users/varya/WebDev/Personal/varya.github.com/content/posts/sc5-style-guide-next-level/index_en.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>When it comes to the large web applications, we often operate with complex components. Such components are not just CSS\\nstyles for the pieces of an interface but also their JavaScript interactions and templates. As documentation, the style\\nguide should reflect them all. In other words, the components on the style guide’s pages should be the same living as in\\nproduction.</p>\\n<excerpt/>\\n<p>At my recent project, we have been using <a href=\\\"http://styleguide.sc5.io/\\\">SC5 Style Guide</a> in its simplest way - documenting\\nthe view of the components. For that, we provided the needed HTML in the KSS code and so has received the rendered\\ncomponent library.</p>\\n<p>However, in the production code, these components appeared at the pages as a result of some templating transformations.\\nAlso, the project is massive and fast-developed, and the changes to the templates happened all the time. As a result,\\nthe style guide was always out of date.</p>\\n<p>Moreover, much functionality could not be illustrated with plain HTML.\\nTo be rendered correctly and interact with a user, it also needs its JavaScript code.</p>\\n<p>At this project, I have solved the problem using advanced configuration of SC5 Style Guide. Below you can find the\\ntricks and explanation.</p>\\n<h2>Living JavaScript components</h2>\\n<p>Usually, a piece of an interface (often called ‘a component’) is a combination of HTML, CSS, and JavaScript. With the\\nbasic features if SC5 Style Guide you can easily document HTML and CSS. However, applying JavaScript to the components\\nrequires an additional configuration.</p>\\n<p>In SC5 Styleguide, you can provide additional tags into the <code class=\\\"language-text\\\">&lt;head&gt;</code> section of the generated style guide’s page. They\\ncan be <code class=\\\"language-text\\\">&lt;script&gt;</code> tags linking the JavaScript you need.</p>\\n<p>Assuming this, you can bundle the necessary JavaScript into one file, and link it to the style guide’s pages, like this:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">gulp.task(&quot;styleguide:generate&quot;, function() {\\n\\n  return gulp.src([&quot;path/to/css/**/*.sass&quot;])\\n    .pipe(styleguide.generate({\\n      title: &quot;My Styleguide&quot;,\\n      ...\\n      extraHead: [\\n        &#39;&lt;script src=&quot;/js/all-components.js&quot;&gt;&lt;/script&gt;&#39;,\\n        ...\\n      ]\\n    ...</code></pre>\\n      </div>\\n<p>Another option for you to use in the configuration is <code class=\\\"language-text\\\">disableEncapsulation: true</code>. By default, the tool wraps every\\ncomponent into a Shadow DOM container. It makes the components encapsulated and protects from unwanted impact of global CSS.\\nAlso, the Shadow DOM wrapper prevents global JavaScript to access the components. Disabling this function, you can give\\nthe JavaScript all the access, the same way as it works on a usual page.</p>\\n<p>In most cases, JavaScript for the components requires initialization. On the style guide’s pages a <code class=\\\"language-text\\\">styleguide:onRendered</code>\\nevent emits when a component is rendered. You can listen for this event and initialize the components in the event’s\\nhandler function.</p>\\n<p>For example, if using jQuery:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$(window).on(&#39;styleguide:onRendered&#39;, function(e) {\\n  // e.originalEvent.detail.elements[0] - component&#39;s container\\n  initComponent(e.originalEvent.detail.elements[0])\\n});</code></pre>\\n      </div>\\n<h2>Additional processors</h2>\\n<p>The SC5 Style Guide parses the KSS documentation in your CSS (SASS, LESS) code, collects information about all the\\ncomponents and produces a JSON file with it. The documentation pages you can see are the Angular pages built\\non the information in this JSON.</p>\\n<p>Generating the style guide, you can inject additional processors into transforming data for this JSON file. The\\ncustom processing functions can re-organize and modify this data. You can use this trick to provide a more clever\\ngenerator, run templates and parametrized JavaScript components.</p>\\n<p>Examine the generated <code class=\\\"language-text\\\">styleguide.json</code> file to see how the data is organized by default. You are going to find out that\\nevery component is represented by an object similar to the following:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">{\\n  header: &quot;Sub navigation tabs&quot;,\\n  description: &quot;&lt;p class=&quot;sg&quot;&gt;Navigation item&lt;/p&gt; &quot;,\\n  modifiers: [ ],\\n  deprecated: false,\\n  experimental: false,\\n  reference: &quot;4.15.1&quot;,\\n  markup: &quot;&lt;ul class=&quot;sub-navigation-tabs&quot;&gt;...&lt;ul&gt;&quot;,\\n  css: &quot;.sub-navigation-tabs { /* some css */ }&quot;,\\n  syntax: &quot;less&quot;,\\n  file: &quot;tabs.less&quot;,\\n  parentReference: &quot;4.15&quot;,\\n  wrapper: &quot;&lt;sg-wrapper-content/&gt;&quot;,\\n  renderMarkup: &quot;&lt;ul class=&quot;sub-navigation-tabs&quot;&gt;...&lt;ul&gt;&quot;,\\n  variables: [\\n    &quot;colorMain&quot;,\\n    &quot;bgColorSecond&quot;,\\n    &quot;textColor&quot;,\\n    &quot;textColorHover&quot;\\n  ],\\n  fileHash: &quot;d00311f793d66a9e9dee9939dedd9fd9&quot;\\n}</code></pre>\\n      </div>\\n<p>To modify this data, provide additional processing function as <code class=\\\"language-text\\\">styleguideProcessors</code> option. For example,</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">gulp.task(&quot;styleguide:generate&quot;, function() {\\n\\n  return gulp.src([&quot;path/to/css/**/*.sass&quot;])\\n    .pipe(styleguide.generate({\\n      title: &quot;My Styleguide&quot;,\\n      ...\\n      styleguideProcessors: {\\n        30: processTemplates\\n      }\\n    ...</code></pre>\\n      </div>\\n<p>As a value of this option, you can list the processing functions. The given indexes matter for the order in which these\\nfunctions are applied to the data.</p>\\n<p>Check out <a href=\\\"https://github.com/SC5/sc5-styleguide#build-options\\\">the documentation for options</a>.</p>\\n<p>In my projects, I used additional processors to operate custom KSS parameters and modify data.</p>\\n<h2>Custom KSS data</h2>\\n<p>In the section descriptions, you can provide additional KSS parameters with the names prefixed with <code class=\\\"language-text\\\">sg-</code>. For example,\\nyou can provide a path to a template which produces the markup for the component:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">// Button\\n//\\n// markup:\\n// { title: &quot;Move on&quot;, type=&quot;submit&quot; }\\n//\\n// sg-template:\\n// src/components/button/button.ejs\\n//\\n// Styleguide 1.2.3</code></pre>\\n      </div>\\n<p>In here the markup works as an input value for the given template. You can teach Style Guide to apply the template to\\nthe declared object and put the result as a markup to render. To do it you need a custom processing function mentioned\\nabove.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">var processTemplates = (styleguide) =&gt; {\\n\\n  styleguide.sections.forEach((section) =&gt; {\\n\\n    if (section[&#39;sg-template&#39;]) {\\n      var templatePath = section[&#39;sg-template&#39;].trim()\\n      templatePath = path.join(process.cwd(), templatePath)\\n\\n      var templateStr = fs.readFileSync(templatePath, &#39;utf8&#39;)\\n      var inputData = eval(&#39;(&#39; + section.markup + &#39;)&#39;)\\n\\n      section.renderMarkup = ejs.render(templateStr, insertData)\\n    }\\n\\n  }\\n\\n}</code></pre>\\n      </div>\\n<h2>Templates on fly</h2>\\n<p>In the single-page applications, templates work on the client side. In this case, it is better to process them\\nin the style guide too. In other words, you should include the templates into the JavaScript bundle and initialize\\nthe components on containers.</p>\\n<p>Combining this approach to the custom processors, you can store the code example for every compoentn in the <code class=\\\"language-text\\\">markup</code>\\nKSS field.</p>\\n<p>For example,</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">// Tabs\\n//\\n// markup:\\n// var Tabs = require(&#39;src/components/tab.js&#39;)\\n// Tabs.init($container, { items: [...] })\\n//\\n// sg-js-component:\\n// &lt;div class=&quot;sg-tabs-container&quot;&gt;&lt;/div&gt;\\n//\\n// Styleguide 1.2.3</code></pre>\\n      </div>\\n<p>With a custom processor, you can put the container’s code as a markup to render:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">var processorForJsComponents = function(styleguide) {\\n\\n  styleguide.sections.forEach((section) =&gt; {\\n    if (section[&#39;sg-js-component&#39;]) {\\n      section.renderMarkup = section.wrapper.replace(\\n        &#39;&lt;sg-wrapper-content/&gt;&#39;, section[&#39;sg-js-component&#39;]\\n      );\\n    }\\n  }\\n\\n}</code></pre>\\n      </div>\\n<h2>Adjustable initialization for JavaScript</h2>\\n<p>Usually, different components need to be initialized in differently. Also, they may require some fake data. You can\\nrun various Javascript functions on separate component containers to get this result.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">var TabsInit = require(&#39;src/components/tabs/tabs.init.js&#39;)\\n\\nvar knownComponents = {\\n  &#39;.sg-tabs-container&#39;: TabsInit\\n}\\n\\n$(window).on(&#39;styleguide:onRendered&#39;, function(e) {\\n\\n  knownComponents.forEach((componentInit, componentSelector) =&gt; {\\n    var containingComponents = $(e.originalEvent.detail.elements[0]).find(componentSelector)\\n    if (containingComponents.length &gt; 0) {\\n      componentInit(containingComponents)\\n    }\\n  })\\n\\n})</code></pre>\\n      </div>\\n<p>This code runs a corresponding function for every selector in the <code class=\\\"language-text\\\">knownComponents</code> object. The matching DOM element(s)\\npassed into the initializing function as a parameter.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">// src/components/tabs/tabs.sg-init.js\\n\\nvar Tabs = require(&#39;./tabs.js&#39;)\\n\\nvar fakeData = [\\n  { title: &#39;Tab1&#39;, url: &#39;/index.html&#39; },\\n  { title: &#39;Tab2&#39;, url: &#39;/contacts&#39; }\\n]\\n\\nmodule.exports = function($container) {\\n  // Real calling for initing function depends on\\n  // you component system interface\\n  Tabs.init($container, { items: fakeData })\\n}</code></pre>\\n      </div>\\n<p>In this system, you can have several containers with the same CSS class but parametrized with any other information, e.g.\\ndata attributes:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">// Tabs, another version\\n//\\n// markup:\\n// var Tabs = require(&#39;src/components/tab.js&#39;)\\n// Tabs.init($container, { another: true, items: [...] })\\n//\\n// sg-js-component:\\n// &lt;div class=&quot;sg-tabs-container&quot; data-type=&quot;another&quot;&gt;&lt;/div&gt;\\n//\\n// Styleguide 1.2.4</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">...\\nmodule.exports = function($container) {\\n  var type = $container.data(&#39;type&#39;)\\n\\n  if (type == &#39;another&#39;) {\\n    Tabs.init($container, { another: true,  items: fakeData })\\n  } else {\\n    Tabs.init($container, { items: fakeData })\\n  }\\n}</code></pre>\\n      </div>\\n<h2>File structure</h2>\\n<p>You may have noticed that I suggest storing everything related to the component under the same folder. This is also\\nrelevant to the style-guide-related files.</p>\\n<p>For a user, a component is a consistent entity. They get it as a whole thing, no matter how many technologies\\nare behind. For a developer, it is not that straightforward. We use CSS for styling, JavaScript for interactions and HTML\\nfor the view. The corresponding code is usually placed in a separate file for each technology. I find it quite\\ndistracting.</p>\\n<p>However, the ‘component folder’ approach smoothes this situation. Storing everything (including the documentation) in\\nthe same place improves developer’s experience very much.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">src/\\n  components/\\n    login/\\n      login.ejs\\n      login.js\\n      login.sg-init.js\\n    tabs/\\n      tabs.ejs\\n      tabs.js\\n      tabs.sass\\n      tabs.sg-init.js</code></pre>\\n      </div>\\n<h2>Enjoy</h2>\\n<p>After ajusting the SC5 Style Guide, as shown above, you will get the double living documentation. Remember about the\\nwatching mode to re-generate the style guide on the file changes. It works as a nice development playground.</p>\\n<p>Also, last but not least, I would like to thank the community which made these things possible. I used the SC5 Style Guide\\nfeatures by other developers and so feel very grateful. You may see their names <a href=\\\"https://github.com/SC5/sc5-styleguide/releases\\\">at the releases’\\npage</a>. If you want yours to appear here, please\\n<a href=\\\"https://github.com/SC5/sc5-styleguide\\\">contribute</a>.</p>\",\"fields\":{\"slug\":\"en/posts/sc5-style-guide-next-level/\",\"prefix\":\"\",\"disqusIdentifier\":\"posts-sc5-style-guide-next-level-index-en\"},\"frontmatter\":{\"title\":\"Living SC5 Styleguide, the next level\",\"date\":\"23 May 2016\",\"v2\":true,\"old\":null,\"tumblr\":null,\"meta\":{\"desc\":\"Living documentaion for CSS, JavaScript and templates of your components with SC5 Style Guide. In this post I share my experience from the recent large project.\\n\"},\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/thumb-5677907f093a3a587d0c6a6fc18d6a91-160fa.png\"}}}}},\"authornote\":{\"id\":\"/Users/varya/WebDev/Personal/varya.github.com/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Mr. Gatsby</strong> Proin ornare ligula eu tellus tempus elementum. Aenean <a href=\\\"/\\\">bibendum</a> iaculis mi, nec blandit lacus interdum vitae. Vestibulum non nibh risus, a scelerisque purus. Blandit lacus interdum vitae. Vestibulum non nibh risus, a scelerisque purus.</p>\"},\"site\":{\"siteMetadata\":{\"siteUrl\":\"http://varya.me/\"}}},\"pathContext\":{\"slug\":\"en/posts/sc5-style-guide-next-level/\",\"prev\":{\"id\":\"/Users/varya/WebDev/Personal/varya.github.com/content/posts/sc5-styleguide-for-smallers/index_ru.md absPath of file >>> MarkdownRemark\",\"fields\":{\"slug\":\"ru/posts/sc5-styleguide-for-smallers/\",\"prefix\":\"\",\"lang\":\"ru\",\"disqusIdentifier\":\"posts-sc5-styleguide-for-smallers-index-ru\"},\"frontmatter\":{\"title\":\"Стайл гайд для самых маленьких\"}},\"next\":{\"id\":\"/Users/varya/WebDev/Personal/varya.github.com/content/posts/react-redux-simple-project/index_en.md absPath of file >>> MarkdownRemark\",\"fields\":{\"slug\":\"en/posts/react-redux-simple-project/\",\"prefix\":\"\",\"lang\":\"en\",\"disqusIdentifier\":\"posts-react-redux-simple-project-index-en\"},\"frontmatter\":{\"title\":\"Simple yet promising structure for React/Redux project\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---en-posts-sc-5-style-guide-next-level-5a2bdc9a2ebc25fe441f.js","module.exports = {\"data\":{\"post\":{\"id\":\"/Users/varya/WebDev/Personal/varya.github.com/content/posts/sc5-style-guide-next-level/index_en.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>When it comes to the large web applications, we often operate with complex components. Such components are not just CSS\\nstyles for the pieces of an interface but also their JavaScript interactions and templates. As documentation, the style\\nguide should reflect them all. In other words, the components on the style guide’s pages should be the same living as in\\nproduction.</p>\\n<excerpt/>\\n<p>At my recent project, we have been using <a href=\\\"http://styleguide.sc5.io/\\\">SC5 Style Guide</a> in its simplest way - documenting\\nthe view of the components. For that, we provided the needed HTML in the KSS code and so has received the rendered\\ncomponent library.</p>\\n<p>However, in the production code, these components appeared at the pages as a result of some templating transformations.\\nAlso, the project is massive and fast-developed, and the changes to the templates happened all the time. As a result,\\nthe style guide was always out of date.</p>\\n<p>Moreover, much functionality could not be illustrated with plain HTML.\\nTo be rendered correctly and interact with a user, it also needs its JavaScript code.</p>\\n<p>At this project, I have solved the problem using advanced configuration of SC5 Style Guide. Below you can find the\\ntricks and explanation.</p>\\n<h2>Living JavaScript components</h2>\\n<p>Usually, a piece of an interface (often called ‘a component’) is a combination of HTML, CSS, and JavaScript. With the\\nbasic features if SC5 Style Guide you can easily document HTML and CSS. However, applying JavaScript to the components\\nrequires an additional configuration.</p>\\n<p>In SC5 Styleguide, you can provide additional tags into the <code class=\\\"language-text\\\">&lt;head&gt;</code> section of the generated style guide’s page. They\\ncan be <code class=\\\"language-text\\\">&lt;script&gt;</code> tags linking the JavaScript you need.</p>\\n<p>Assuming this, you can bundle the necessary JavaScript into one file, and link it to the style guide’s pages, like this:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">gulp.task(&quot;styleguide:generate&quot;, function() {\\n\\n  return gulp.src([&quot;path/to/css/**/*.sass&quot;])\\n    .pipe(styleguide.generate({\\n      title: &quot;My Styleguide&quot;,\\n      ...\\n      extraHead: [\\n        &#39;&lt;script src=&quot;/js/all-components.js&quot;&gt;&lt;/script&gt;&#39;,\\n        ...\\n      ]\\n    ...</code></pre>\\n      </div>\\n<p>Another option for you to use in the configuration is <code class=\\\"language-text\\\">disableEncapsulation: true</code>. By default, the tool wraps every\\ncomponent into a Shadow DOM container. It makes the components encapsulated and protects from unwanted impact of global CSS.\\nAlso, the Shadow DOM wrapper prevents global JavaScript to access the components. Disabling this function, you can give\\nthe JavaScript all the access, the same way as it works on a usual page.</p>\\n<p>In most cases, JavaScript for the components requires initialization. On the style guide’s pages a <code class=\\\"language-text\\\">styleguide:onRendered</code>\\nevent emits when a component is rendered. You can listen for this event and initialize the components in the event’s\\nhandler function.</p>\\n<p>For example, if using jQuery:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">$(window).on(&#39;styleguide:onRendered&#39;, function(e) {\\n  // e.originalEvent.detail.elements[0] - component&#39;s container\\n  initComponent(e.originalEvent.detail.elements[0])\\n});</code></pre>\\n      </div>\\n<h2>Additional processors</h2>\\n<p>The SC5 Style Guide parses the KSS documentation in your CSS (SASS, LESS) code, collects information about all the\\ncomponents and produces a JSON file with it. The documentation pages you can see are the Angular pages built\\non the information in this JSON.</p>\\n<p>Generating the style guide, you can inject additional processors into transforming data for this JSON file. The\\ncustom processing functions can re-organize and modify this data. You can use this trick to provide a more clever\\ngenerator, run templates and parametrized JavaScript components.</p>\\n<p>Examine the generated <code class=\\\"language-text\\\">styleguide.json</code> file to see how the data is organized by default. You are going to find out that\\nevery component is represented by an object similar to the following:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">{\\n  header: &quot;Sub navigation tabs&quot;,\\n  description: &quot;&lt;p class=&quot;sg&quot;&gt;Navigation item&lt;/p&gt; &quot;,\\n  modifiers: [ ],\\n  deprecated: false,\\n  experimental: false,\\n  reference: &quot;4.15.1&quot;,\\n  markup: &quot;&lt;ul class=&quot;sub-navigation-tabs&quot;&gt;...&lt;ul&gt;&quot;,\\n  css: &quot;.sub-navigation-tabs { /* some css */ }&quot;,\\n  syntax: &quot;less&quot;,\\n  file: &quot;tabs.less&quot;,\\n  parentReference: &quot;4.15&quot;,\\n  wrapper: &quot;&lt;sg-wrapper-content/&gt;&quot;,\\n  renderMarkup: &quot;&lt;ul class=&quot;sub-navigation-tabs&quot;&gt;...&lt;ul&gt;&quot;,\\n  variables: [\\n    &quot;colorMain&quot;,\\n    &quot;bgColorSecond&quot;,\\n    &quot;textColor&quot;,\\n    &quot;textColorHover&quot;\\n  ],\\n  fileHash: &quot;d00311f793d66a9e9dee9939dedd9fd9&quot;\\n}</code></pre>\\n      </div>\\n<p>To modify this data, provide additional processing function as <code class=\\\"language-text\\\">styleguideProcessors</code> option. For example,</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">gulp.task(&quot;styleguide:generate&quot;, function() {\\n\\n  return gulp.src([&quot;path/to/css/**/*.sass&quot;])\\n    .pipe(styleguide.generate({\\n      title: &quot;My Styleguide&quot;,\\n      ...\\n      styleguideProcessors: {\\n        30: processTemplates\\n      }\\n    ...</code></pre>\\n      </div>\\n<p>As a value of this option, you can list the processing functions. The given indexes matter for the order in which these\\nfunctions are applied to the data.</p>\\n<p>Check out <a href=\\\"https://github.com/SC5/sc5-styleguide#build-options\\\">the documentation for options</a>.</p>\\n<p>In my projects, I used additional processors to operate custom KSS parameters and modify data.</p>\\n<h2>Custom KSS data</h2>\\n<p>In the section descriptions, you can provide additional KSS parameters with the names prefixed with <code class=\\\"language-text\\\">sg-</code>. For example,\\nyou can provide a path to a template which produces the markup for the component:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">// Button\\n//\\n// markup:\\n// { title: &quot;Move on&quot;, type=&quot;submit&quot; }\\n//\\n// sg-template:\\n// src/components/button/button.ejs\\n//\\n// Styleguide 1.2.3</code></pre>\\n      </div>\\n<p>In here the markup works as an input value for the given template. You can teach Style Guide to apply the template to\\nthe declared object and put the result as a markup to render. To do it you need a custom processing function mentioned\\nabove.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">var processTemplates = (styleguide) =&gt; {\\n\\n  styleguide.sections.forEach((section) =&gt; {\\n\\n    if (section[&#39;sg-template&#39;]) {\\n      var templatePath = section[&#39;sg-template&#39;].trim()\\n      templatePath = path.join(process.cwd(), templatePath)\\n\\n      var templateStr = fs.readFileSync(templatePath, &#39;utf8&#39;)\\n      var inputData = eval(&#39;(&#39; + section.markup + &#39;)&#39;)\\n\\n      section.renderMarkup = ejs.render(templateStr, insertData)\\n    }\\n\\n  }\\n\\n}</code></pre>\\n      </div>\\n<h2>Templates on fly</h2>\\n<p>In the single-page applications, templates work on the client side. In this case, it is better to process them\\nin the style guide too. In other words, you should include the templates into the JavaScript bundle and initialize\\nthe components on containers.</p>\\n<p>Combining this approach to the custom processors, you can store the code example for every compoentn in the <code class=\\\"language-text\\\">markup</code>\\nKSS field.</p>\\n<p>For example,</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">// Tabs\\n//\\n// markup:\\n// var Tabs = require(&#39;src/components/tab.js&#39;)\\n// Tabs.init($container, { items: [...] })\\n//\\n// sg-js-component:\\n// &lt;div class=&quot;sg-tabs-container&quot;&gt;&lt;/div&gt;\\n//\\n// Styleguide 1.2.3</code></pre>\\n      </div>\\n<p>With a custom processor, you can put the container’s code as a markup to render:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">var processorForJsComponents = function(styleguide) {\\n\\n  styleguide.sections.forEach((section) =&gt; {\\n    if (section[&#39;sg-js-component&#39;]) {\\n      section.renderMarkup = section.wrapper.replace(\\n        &#39;&lt;sg-wrapper-content/&gt;&#39;, section[&#39;sg-js-component&#39;]\\n      );\\n    }\\n  }\\n\\n}</code></pre>\\n      </div>\\n<h2>Adjustable initialization for JavaScript</h2>\\n<p>Usually, different components need to be initialized in differently. Also, they may require some fake data. You can\\nrun various Javascript functions on separate component containers to get this result.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">var TabsInit = require(&#39;src/components/tabs/tabs.init.js&#39;)\\n\\nvar knownComponents = {\\n  &#39;.sg-tabs-container&#39;: TabsInit\\n}\\n\\n$(window).on(&#39;styleguide:onRendered&#39;, function(e) {\\n\\n  knownComponents.forEach((componentInit, componentSelector) =&gt; {\\n    var containingComponents = $(e.originalEvent.detail.elements[0]).find(componentSelector)\\n    if (containingComponents.length &gt; 0) {\\n      componentInit(containingComponents)\\n    }\\n  })\\n\\n})</code></pre>\\n      </div>\\n<p>This code runs a corresponding function for every selector in the <code class=\\\"language-text\\\">knownComponents</code> object. The matching DOM element(s)\\npassed into the initializing function as a parameter.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">// src/components/tabs/tabs.sg-init.js\\n\\nvar Tabs = require(&#39;./tabs.js&#39;)\\n\\nvar fakeData = [\\n  { title: &#39;Tab1&#39;, url: &#39;/index.html&#39; },\\n  { title: &#39;Tab2&#39;, url: &#39;/contacts&#39; }\\n]\\n\\nmodule.exports = function($container) {\\n  // Real calling for initing function depends on\\n  // you component system interface\\n  Tabs.init($container, { items: fakeData })\\n}</code></pre>\\n      </div>\\n<p>In this system, you can have several containers with the same CSS class but parametrized with any other information, e.g.\\ndata attributes:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">// Tabs, another version\\n//\\n// markup:\\n// var Tabs = require(&#39;src/components/tab.js&#39;)\\n// Tabs.init($container, { another: true, items: [...] })\\n//\\n// sg-js-component:\\n// &lt;div class=&quot;sg-tabs-container&quot; data-type=&quot;another&quot;&gt;&lt;/div&gt;\\n//\\n// Styleguide 1.2.4</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">...\\nmodule.exports = function($container) {\\n  var type = $container.data(&#39;type&#39;)\\n\\n  if (type == &#39;another&#39;) {\\n    Tabs.init($container, { another: true,  items: fakeData })\\n  } else {\\n    Tabs.init($container, { items: fakeData })\\n  }\\n}</code></pre>\\n      </div>\\n<h2>File structure</h2>\\n<p>You may have noticed that I suggest storing everything related to the component under the same folder. This is also\\nrelevant to the style-guide-related files.</p>\\n<p>For a user, a component is a consistent entity. They get it as a whole thing, no matter how many technologies\\nare behind. For a developer, it is not that straightforward. We use CSS for styling, JavaScript for interactions and HTML\\nfor the view. The corresponding code is usually placed in a separate file for each technology. I find it quite\\ndistracting.</p>\\n<p>However, the ‘component folder’ approach smoothes this situation. Storing everything (including the documentation) in\\nthe same place improves developer’s experience very much.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">src/\\n  components/\\n    login/\\n      login.ejs\\n      login.js\\n      login.sg-init.js\\n    tabs/\\n      tabs.ejs\\n      tabs.js\\n      tabs.sass\\n      tabs.sg-init.js</code></pre>\\n      </div>\\n<h2>Enjoy</h2>\\n<p>After ajusting the SC5 Style Guide, as shown above, you will get the double living documentation. Remember about the\\nwatching mode to re-generate the style guide on the file changes. It works as a nice development playground.</p>\\n<p>Also, last but not least, I would like to thank the community which made these things possible. I used the SC5 Style Guide\\nfeatures by other developers and so feel very grateful. You may see their names <a href=\\\"https://github.com/SC5/sc5-styleguide/releases\\\">at the releases’\\npage</a>. If you want yours to appear here, please\\n<a href=\\\"https://github.com/SC5/sc5-styleguide\\\">contribute</a>.</p>\",\"fields\":{\"slug\":\"en/posts/sc5-style-guide-next-level/\",\"prefix\":\"\",\"disqusIdentifier\":\"posts-sc5-style-guide-next-level-index-en\"},\"frontmatter\":{\"title\":\"Living SC5 Styleguide, the next level\",\"date\":\"23 May 2016\",\"v2\":true,\"old\":null,\"tumblr\":null,\"meta\":{\"desc\":\"Living documentaion for CSS, JavaScript and templates of your components with SC5 Style Guide. In this post I share my experience from the recent large project.\\n\"},\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/thumb-5677907f093a3a587d0c6a6fc18d6a91-160fa.png\"}}}}},\"authornote\":{\"id\":\"/Users/varya/WebDev/Personal/varya.github.com/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Mr. Gatsby</strong> Proin ornare ligula eu tellus tempus elementum. Aenean <a href=\\\"/\\\">bibendum</a> iaculis mi, nec blandit lacus interdum vitae. Vestibulum non nibh risus, a scelerisque purus. Blandit lacus interdum vitae. Vestibulum non nibh risus, a scelerisque purus.</p>\"},\"site\":{\"siteMetadata\":{\"siteUrl\":\"http://varya.me/\"}}},\"pathContext\":{\"slug\":\"en/posts/sc5-style-guide-next-level/\",\"prev\":{\"id\":\"/Users/varya/WebDev/Personal/varya.github.com/content/posts/sc5-styleguide-for-smallers/index_ru.md absPath of file >>> MarkdownRemark\",\"fields\":{\"slug\":\"ru/posts/sc5-styleguide-for-smallers/\",\"prefix\":\"\",\"lang\":\"ru\",\"disqusIdentifier\":\"posts-sc5-styleguide-for-smallers-index-ru\"},\"frontmatter\":{\"title\":\"Стайл гайд для самых маленьких\"}},\"next\":{\"id\":\"/Users/varya/WebDev/Personal/varya.github.com/content/posts/react-redux-simple-project/index_en.md absPath of file >>> MarkdownRemark\",\"fields\":{\"slug\":\"en/posts/react-redux-simple-project/\",\"prefix\":\"\",\"lang\":\"en\",\"disqusIdentifier\":\"posts-react-redux-simple-project-index-en\"},\"frontmatter\":{\"title\":\"Simple yet promising structure for React/Redux project\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/en-posts-sc-5-style-guide-next-level.json\n// module id = 593\n// module chunks = 217487980924903"],"sourceRoot":""}
{"version":3,"sources":["webpack:///path---posts-44efa10926247abb5578.js","webpack:///./.cache/json/posts.json"],"names":["webpackJsonp","735","module","exports","data","posts","edges","node","excerpt","fields","slug","prefix","frontmatter","title","date","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,OAASC,QAAUC,MAAQC,QAAA,oNAAAC,QAAwOC,KAAA,8BAAAC,OAAA,IAAiDC,aAAgBC,MAAA,kDAAAC,KAAA,mBAAoFP,MAAQC,QAAA,+iBAAAC,QAAmkBC,KAAA,kCAAAC,OAAA,IAAqDC,aAAgBC,MAAA,oDAAAC,KAAA,sBAAyFP,MAAQC,QAAA,sbAAAC,QAA4cC,KAAA,qDAAAC,OAAA,IAAwEC,aAAgBC,MAAA,kDAAAC,KAAA,sBAAuFP,MAAQC,QAAA,wvBAAAC,QAA4wBC,KAAA,uCAAAC,OAAA,IAA0DC,aAAgBC,MAAA,yDAAAC,KAAA,uBAA+FP,MAAQC,QAAA,2aAAAC,QAA+bC,KAAA,yBAAAC,OAAA,IAA4CC,aAAgBC,MAAA,gBAAAC,KAAA,uBAAsDP,MAAQC,QAAA,gYAAAC,QAAoZC,KAAA,uCAAAC,OAAA,IAA0DC,aAAgBC,MAAA,wCAAAC,KAAA,kBAAyEP,MAAQC,QAAA,4dAAAC,QAAgfC,KAAA,kCAAAC,OAAA,IAAqDC,aAAgBC,MAAA,+BAAAC,KAAA,kBAAgEP,MAAQC,QAAA,qlBAAAC,QAAymBC,KAAA,sCAAAC,OAAA,IAAyDC,aAAgBC,MAAA,qCAAAC,KAAA,oBAAwEP,MAAQC,QAAA,gaAAAC,QAAobC,KAAA,iCAAAC,OAAA,IAAoDC,aAAgBC,MAAA,4CAAAC,KAAA,oBAA+EP,MAAQC,QAAA,guBAAAC,QAAovBC,KAAA,+CAAAC,OAAA,IAAkEC,aAAgBC,MAAA,qCAAAC,KAAA,uBAA2EP,MAAQC,QAAA,mWAAAC,QAAuXC,KAAA,iCAAAC,OAAA,IAAoDC,aAAgBC,MAAA,wCAAAC,KAAA,uBAA8EP,MAAQC,QAAA,4SAAAC,QAAgUC,KAAA,+BAAAC,OAAA,IAAkDC,aAAgBC,MAAA,6DAAAC,KAAA,wBAAoGP,MAAQC,QAAA,6iBAAAC,QAAikBC,KAAA,wCAAAC,OAAA,IAA2DC,aAAgBC,MAAA,iCAAAC,KAAA,mBAAmEP,MAAQC,QAAA,wOAAAC,QAA4PC,KAAA,wBAAAC,OAAA,IAA2CC,aAAgBC,MAAA,cAAAC,KAAA,uBAAoDP,MAAQC,QAAA,2UAAAC,QAA+VC,KAAA,mCAAAC,OAAA,IAAsDC,aAAgBC,MAAA,uCAAAC,KAAA,wBAA8EP,MAAQC,QAAA,qiBAAAC,QAAyjBC,KAAA,iCAAAC,OAAA,IAAoDC,aAAgBC,MAAA,8DAAAC,KAAA,mBAAgGP,MAAQC,QAAA,wQAAAC,QAA4RC,KAAA,6BAAAC,OAAA,IAAgDC,aAAgBC,MAAA,mDAAAC,KAAA,mBAAqFP,MAAQC,QAAA,8LAAAC,QAAkNC,KAAA,kCAAAC,OAAA,IAAqDC,aAAgBC,MAAA,+BAAAC,KAAA,mBAAiEP,MAAQC,QAAA,weAAAC,QAA4fC,KAAA,6CAAAC,OAAA,IAAgEC,aAAgBC,MAAA,+CAAAC,KAAA,kBAAgFP,MAAQC,QAAA,sXAAAC,QAA0YC,KAAA,oCAAAC,OAAA,IAAuDC,aAAgBC,MAAA,2BAAAC,KAAA,oBAA8DP,MAAQC,QAAA,ocAAAC,QAAwdC,KAAA,mCAAAC,OAAA,IAAsDC,aAAgBC,MAAA,sCAAAC,KAAA,oBAAyEP,MAAQC,QAAA,oUAAAC,QAAwVC,KAAA,mCAAAC,OAAA,IAAsDC,aAAgBC,MAAA,2CAAAC,KAAA,oBAA8EP,MAAQC,QAAA,oQAAAC,QAAwRC,KAAA,8BAAAC,OAAA,IAAiDC,aAAgBC,MAAA,0BAAAC,KAAA,uBAAgEP,MAAQC,QAAA,8aAAAC,QAAkcC,KAAA,kCAAAC,OAAA,IAAqDC,aAAgBC,MAAA,wBAAAC,KAAA,sBAA6DP,MAAQC,QAAA,ybAAAC,QAA6cC,KAAA,+BAAAC,OAAA,IAAkDC,aAAgBC,MAAA,+CAAAC,KAAA,sBAAoFP,MAAQC,QAAA,8VAAAC,QAAkXC,KAAA,2BAAAC,OAAA,IAA8CC,aAAgBC,MAAA,6BAAAC,KAAA,uBAAmEP,MAAQC,QAAA,qMAAAC,QAAyNC,KAAA,6BAAAC,OAAA,IAAgDC,aAAgBC,MAAA,uBAAAC,KAAA,sBAA4DP,MAAQC,QAAA,iQAAqLC,QAAgGC,KAAA,2CAAAC,OAAA,IAA8DC,aAAgBC,MAAA,mCAAAC,KAAA,mBAAqEP,MAAQC,QAAA,gKAAAC,QAAoLC,KAAA,+BAAAC,OAAA,IAAkDC,aAAgBC,MAAA,gCAAAC,KAAA,sBAAoEC","file":"path---posts-44efa10926247abb5578.js","sourcesContent":["webpackJsonp([140933230050240],{\n\n/***/ 735:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"posts\":{\"edges\":[{\"node\":{\"excerpt\":\"\\n## Introduction\\n\\nIn general, *design systems* is a systematic approach to creating and maintaining consistent user interfaces which\\ncoherently communicate the brand values and empower user experience.\\n\\n\",\"fields\":{\"slug\":\"blog/design-systems-review/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Design Systems — review of vocabulary and terms\",\"date\":\"19 July 2018\"}}},{\"node\":{\"excerpt\":\"\\nCompany internal communication is a crucial aspect of forming innovation-friendly environment, in which employees can\\neffectively apply their expertise and creativity for achieving business goals.\\n\\nCreative people need “emotional ownership” in the goals and objectives, which becomes even more important speaking about\\nthe corporate world where such people are not co-founders but employees. (Sarasvathy, 2008) Establishing right\\ncommunicational practices very much contributes to developing this kind of ownership and makes innovation possible.\\n\\n\",\"fields\":{\"slug\":\"en/posts/communication-culture/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Aspect of in-company communication for innovation\",\"date\":\"11 January 2018\"}}},{\"node\":{\"excerpt\":\"\\nLast year, during my studies of IDBM program at Aalto University, I took a course \\\"Design in Innovation Context\\\" which\\ncovered entrepreneurial innovations and behavior. Even out of study context but in everyday life I have always been\\ninterested in the answer to the question “What is so special about entrepreneurs that makes them who they are?”. Below,\\nI have tried to summarize the knowledge I got and answer this question.\\n\\n\",\"fields\":{\"slug\":\"en/posts/what-makes-entrepreneurs-entrepreneurial/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"What   makes   entrepreneurs   entrepreneurial?\",\"date\":\"04 January 2018\"}}},{\"node\":{\"excerpt\":\"\\nTwo weeks ago, I have started a new project of migrating a large website to React. Although this is not developing from\\nscratch but refactoring, there still was a great chance to reconsider the project file structure in its client part.\\n\\nAs a proof-of-concept, I have chosen a pair of components: shopping cart and adding button. This is e-commerce what we\\nare building here :-) My initial goal was to create simple components and demonstrate their reusing as well as introduce\\nRedux as a glue to the components in the data area. As a result, I think I provided a nice and neat structure which\\nhelps a developer to understand what serves what. On the other hand, I tried to keep it simple. In the beginning, there\\nis no need in overcomplicated.\\n\\n\",\"fields\":{\"slug\":\"en/posts/react-redux-simple-project/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Simple yet promising structure for React/Redux project\",\"date\":\"21 November 2016\"}}},{\"node\":{\"excerpt\":\"\\nFirst thing first, I'm staring weekly posts about findings that are somehow related to work. This is a mature but not yet\\nimplemented idea. Although, a friend of mine [Vladimir Starkov sometimes practises the same](https://iamstarkov.com/).\\n\\nIn this issue there are tips on organizing Google Calendar, nice project management addition for GitHub, Styleguide\\nsolutions for React projects and a couple of good reads.\\n\\n\",\"fields\":{\"slug\":\"en/posts/week-44-2016/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Week 44, 2016\",\"date\":\"08 November 2016\"}}},{\"node\":{\"excerpt\":\"\\nWhen it comes to the large web applications, we often operate with complex components. Such components are not just CSS\\nstyles for the pieces of an interface but also their JavaScript interactions and templates. As documentation, the style\\nguide should reflect them all. In other words, the components on the style guide's pages should be the same living as in\\nproduction.\\n\\n\",\"fields\":{\"slug\":\"en/posts/sc5-style-guide-next-level/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Living SC5 Styleguide, the next level\",\"date\":\"23 May 2016\"}}},{\"node\":{\"excerpt\":\"\\nEarlier this year, I participated in a development of a single page application. With the team, we started this\\nproject from scratch. This situation was the most suitable to practice the new technologies.\\n\\nThe stack I've tried was React + ES2015 + postcss + webpack. However, keeping in mind that most of the\\nteam (who were supposed to maintain the project later) are mainly experienced in Angular, I was looking for some\\nsort of combination of these frameworks.\\n\\n\",\"fields\":{\"slug\":\"en/posts/react-angular-project/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Simple React Angular project\",\"date\":\"19 May 2016\"}}},{\"node\":{\"excerpt\":\"\\nBeing a frontend developer these days means to learn the new things every day. We read articles and blog posts,\\nexamine the changelogs, follow the Twitter announcements and participate in the GitHub discussions.\\nThis helps to keep up.\\n\\nHowever,\\nwhen it comes to something bigger, like the exploring of a new framework or an ecosystem, it is not enough.\\nThe perfect solution is to organize a whole day hackathon for the developers in your company.\\nAt SC5 online, we took this advantage mastering the React development. Few ecosystem components such as\\nwebpack and redux came along.\\n\\n\",\"fields\":{\"slug\":\"en/posts/react-hackathon-materials/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Materials for your React hackathon\",\"date\":\"16 April 2016\"}}},{\"node\":{\"excerpt\":\"\\nMy first task for new projects is to create a git repository. Whether it is a new app, or conference slides, or even an\\narticle, I prefer to keep everything in Git. It is an excellent tool, and, personally, I enjoy its command line\\ninterface.\\n\\nHowever, there is always room for improvement. Recently I found an idea how to make my git visualize the changes that\\nI've done to the images in a repository.\\n\\n\",\"fields\":{\"slug\":\"en/posts/image-diffs-with-git/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Visual diffs for the images in a git repo\",\"date\":\"18 March 2016\"}}},{\"node\":{\"excerpt\":\"\\nMy recent huge project was developing a library of CSS and JavaScript components for sharing this code across a lot of\\nweb services and mobile apps. In most cases such work brings up question about how to avoid blocking the processes.\\n\\nThe library has its own flow, and obviously the new things can only appear in new versions. Although I made my best to\\nprovide fast releases, and so the library has them 2-3 times a week, it is still understandable that the library\\ncustomers sometimes cannot wait even an hour.\\n\\nI belive that one of the must-haves of UI library is the freedom which it should give to its customers. You can easily\\nprovide this if practice atomic approach everythere. For example, for the icon fonts.\\n\\n\",\"fields\":{\"slug\":\"en/posts/dealing-atomically-with-icon-fonts/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Dealing atomically with icon fonts\",\"date\":\"10 November 2015\"}}},{\"node\":{\"excerpt\":\"Last week I faced a need to make a fake tag cloud, where the words need to be of different size. This was needed for\\na presentation slide, and as my slides are always in HTML/CSS, must be implemented with these technologies. It is always\\npossible to inject some JavaScript and code anything. But what about pure CSS, do we get random sizes there?\\n\\n\",\"fields\":{\"slug\":\"en/posts/pseudo-tag-cloud-css/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Tag cloud of random sizes in pure CSS\",\"date\":\"02 November 2015\"}}},{\"node\":{\"excerpt\":\"I never thought that I would write a post about diversity. But as the **unicorn law** says that being a woman in tech you\\nwill be eventually speaking about women in tech, I do so now. However I'm doing this not because it is a strong will of\\nmine. Something happened which makes me to respond.\\n\",\"fields\":{\"slug\":\"en/posts/on-the-unicorn-law/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"An answer to the question which should not have been asked\",\"date\":\"07 September 2015\"}}},{\"node\":{\"excerpt\":\"I've been presenting [SC5 Style Guide](http://styleguide.sc5.io/) several times during this year sharing my experience of using it for one\\nof the SC5's clients, Elisa. Assuming that Elisa is a huge mobile operator with a lot of websites and a need\\nto keep those websites visually consistent, there is no wonder that the SC5 Style Guide as a tool provides benefits\\nthere. But what about smaller websites? Would it be useful there? I did not know the answer to this question\\nand wanted to experiment. The experiment was conducted on my blog codebase.\\n\",\"fields\":{\"slug\":\"en/posts/sc5-styleguide-for-smallers/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Style-guide the smaller things\",\"date\":\"30 July 2015\"}}},{\"node\":{\"excerpt\":\"This time I would like to share my experience of keeping a codestyle in one of my working projects. This is about a new\\ntool called **JSCS** which we have recently chosen with the team and now are very pleased with the result.\\n\",\"fields\":{\"slug\":\"en/posts/jscs-in-use/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"JSCS in use\",\"date\":\"11 February 2015\"}}},{\"node\":{\"excerpt\":\"I use the same laptop for both work and personal needs. This is useful but makes me see to keeping my\\nwork-life balance. I do this simply — turn off all the applications running when I finish my working day\\nin the evening. The only issue is not to forget to open them again next day. But this process can be automatized. :-)\\n\",\"fields\":{\"slug\":\"en/posts/run-app-in-time-on-mac/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Run on time (about Mac applications)\",\"date\":\"12 September 2014\"}}},{\"node\":{\"excerpt\":\"Long time ago I could read and learn about web development in Russian only. Later, having completed an English language course, I began to read articles and blogs in English more and more. The same went for conferences: I visited\\nRussian-speaking conferences at first and later switched to English-speaking conferences in Europe. In both articles and conference talks, I noticed how the content was different depending on the language used. Sometime I even thought that the communities evolve in different ways and follow different directions.\\n\",\"fields\":{\"slug\":\"en/posts/frontend-babel-alpha/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"The so different frontend community and how we deal with it\",\"date\":\"30 June 2014\"}}},{\"node\":{\"excerpt\":\"As a mobile apps user you may be already familiar to drawers.\\nThey are quite popular solution for a side menu. Using `Steroids`\\nHTML5/JavaScript framework for hybrid mobile applications, you\\ncan bring such an interface solution into your product very easy.\\n\",\"fields\":{\"slug\":\"en/posts/steroids-drawers/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Using side drawers in mobile apps on Steroids.js\",\"date\":\"09 June 2014\"}}},{\"node\":{\"excerpt\":\"Let me present a stub for **docpad-run** project with\\n**bem-built** static assets. If you ever wanted to be\\na generic blog holder equiped with nice and neat static\\nfiles, here we go.\\n\",\"fields\":{\"slug\":\"en/posts/docpad-with-bem-taste/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Docpad with the taste of BEM\",\"date\":\"04 June 2014\"}}},{\"node\":{\"excerpt\":\"Recently I attended [Front Trends 2014](http://2014.front-trends.com/) in Warsaw.\\nThis is an awesome conference which you should (no, definitely have to!) attend\\nin 2015. Besides incredible main programm Front Trends provides a set of Lighting Talks.\\nThis year I was a part of it presenting [Steroids](http://www.appgyver.com/steroids),\\na framework and a toolkit for developing HTML5 mobile apps. If you did not have\\na chance to hear it, this offline text presentation is for you.\",\"fields\":{\"slug\":\"en/posts/html5-mobile-app-width-native-ui/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"HTML5 mobile apps with native UI on Steroids\",\"date\":\"26 May 2014\"}}},{\"node\":{\"excerpt\":\"The `bem-core` library goes futher and there already is `2.0.0` version\\navailable. This blog was safely switched to the new major version with\\n[some diff to the\\ncode](https://github.com/varya/varya.github.com/commit/f21f810b7cb4e16206ef3d088a8b2c38b615f8f3).\\nNow so can do you. Careful examination of the version changelog will help you\\nwith it. Look how I did this.\",\"fields\":{\"slug\":\"en/posts/switching-to-bem-core-2/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Switching to bem-core#v2\",\"date\":\"16 April 2014\"}}},{\"node\":{\"excerpt\":\"Depending on a project people prefer different ways to adapt BEM.\\nThis results\\ninto a range of tools for our choice. Today, I am translating Maxim Shkalin's\\ndescription of the `BEML` templating pre-processor.\\n\\nWilling to lighten the development with BEM I propose a tiny extension for the\\nHTML syntax (yes, I used to writ all those long CSS classes manually). As the\\nname `BEMHTML` is greedily taken by the Yandex guys, let us call it `BEML`.\",\"fields\":{\"slug\":\"en/posts/beml-html-preprocessor/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"BEML - an HTML preprocessor for BEM\",\"date\":\"09 April 2014\"}}},{\"node\":{\"excerpt\":\"Last week I met the need to develop a web site which static assets have to be\\nhosted on a different server and respond by different URLs than its HTML. This\\nis the requirement to all the static files: stylesheets and JavaScript linked to\\nthe page as well as imges and fonts mentioned in HTML, CSS and JavaScript\\ncode.\",\"fields\":{\"slug\":\"en/posts/borschik-static-assets/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Borschik helps with remote static assets\",\"date\":\"10 March 2014\"}}},{\"node\":{\"excerpt\":\"The recently published [step-by-step tutorial on\\ni-bem.js](http://bem.info/tutorials/articles/bem-js-tutorial/) mentioned **YM\\nmodular system** as a base for component JavaScript solution behind BEM. Why do\\nwe need another modular system? Let us see...\\n\",\"fields\":{\"slug\":\"en/posts/ym-modular-system/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"YM Modular System. Why?\",\"date\":\"25 February 2014\"}}},{\"node\":{\"excerpt\":\"We usually start developing a web site prototyping the interface and then\\nimplementing HTML/CSS and bacis JavaScript. In case\\nof using the full BEM stack a tranformation from prototype to a functioning web\\nsite goes smoothly. You can clone the project from\\n[project-stub](https://github.com/bem/project-stub) and create a static web page\\nas it was [described\\nearlier](http://bem.info/articles/start-with-project-stub/).\\n\",\"fields\":{\"slug\":\"en/posts/javascript-in-bemjson/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"JavaScript in BEMJSON\",\"date\":\"21 January 2014\"}}},{\"node\":{\"excerpt\":\"A couple of days ago I was asked about some basic things of using [BEM project\\nstub](https://github.com/bem/project-stub/tree/14e24fd17ba66a357a2f6fcdce045065b4eb5d6c)\\nfrom someone who is enjoying the full BEM stack (BEM-CSS, i-bem.js and BEMHTML\\ntemplates) for their projects. Answering the questions I promised to turn the\\ninformation into text as we always skip many important things mistakenly\\nconsidering them being primitive.\\n\",\"fields\":{\"slug\":\"en/posts/blocks-and-bundles/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Blocks are bricks, and bundles are buildings\",\"date\":\"06 January 2014\"}}},{\"node\":{\"excerpt\":\"A developer using custom fonts in web (don't say this is evil) usually face a\\ndilemma.\\n\\nThe users' main interest is the content of the page not the\\nview. It is nice to provide it as fast as possible and then apply a custom font.\\nThis blog used to work this way. I provided a script among others in the bundle\\nlinked by the end of the page.\\n\",\"fields\":{\"slug\":\"en/posts/fonts-no-cramp/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Custom fonts with no cramp\",\"date\":\"26 November 2013\"}}},{\"node\":{\"excerpt\":\"There is a well-known front-end pattern which is to have hidden elements in DOM\\nand make them visible when necessary. As with any good pattern, it can be\\ncompromised by wrong implementation.\\n\",\"fields\":{\"slug\":\"en/posts/best-way-to-hide/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"The Best Way to Hide\",\"date\":\"31 October 2013\"}}},{\"node\":{\"excerpt\":\"This article features common problems that developers often face, or maybe used\\nto face before the current open source era, when writing JavaScript for the\\nclient side; showcase of possible solutions to these problems and explanations\\nof my choices.\\n\",\"fields\":{\"slug\":\"en/posts/javascript-component-solutions/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"JavaScript components low basics\",\"date\":\"28 June 2013\"}}},{\"node\":{\"excerpt\":\"\\nAs you might know, I recently run the [BEM\\nLOVE](https://github.com/toivonen/bem-love) project to demonstrate how blocks\\ncan communicate with JavaScript.\",\"fields\":{\"slug\":\"en/posts/patterned-triangle/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Patterned triangles with  CSS\",\"date\":\"19 March 2013\"}}}]}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-44efa10926247abb5578.js","module.exports = {\"data\":{\"posts\":{\"edges\":[{\"node\":{\"excerpt\":\"\\n## Introduction\\n\\nIn general, *design systems* is a systematic approach to creating and maintaining consistent user interfaces which\\ncoherently communicate the brand values and empower user experience.\\n\\n\",\"fields\":{\"slug\":\"blog/design-systems-review/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Design Systems — review of vocabulary and terms\",\"date\":\"19 July 2018\"}}},{\"node\":{\"excerpt\":\"\\nCompany internal communication is a crucial aspect of forming innovation-friendly environment, in which employees can\\neffectively apply their expertise and creativity for achieving business goals.\\n\\nCreative people need “emotional ownership” in the goals and objectives, which becomes even more important speaking about\\nthe corporate world where such people are not co-founders but employees. (Sarasvathy, 2008) Establishing right\\ncommunicational practices very much contributes to developing this kind of ownership and makes innovation possible.\\n\\n\",\"fields\":{\"slug\":\"en/posts/communication-culture/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Aspect of in-company communication for innovation\",\"date\":\"11 January 2018\"}}},{\"node\":{\"excerpt\":\"\\nLast year, during my studies of IDBM program at Aalto University, I took a course \\\"Design in Innovation Context\\\" which\\ncovered entrepreneurial innovations and behavior. Even out of study context but in everyday life I have always been\\ninterested in the answer to the question “What is so special about entrepreneurs that makes them who they are?”. Below,\\nI have tried to summarize the knowledge I got and answer this question.\\n\\n\",\"fields\":{\"slug\":\"en/posts/what-makes-entrepreneurs-entrepreneurial/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"What   makes   entrepreneurs   entrepreneurial?\",\"date\":\"04 January 2018\"}}},{\"node\":{\"excerpt\":\"\\nTwo weeks ago, I have started a new project of migrating a large website to React. Although this is not developing from\\nscratch but refactoring, there still was a great chance to reconsider the project file structure in its client part.\\n\\nAs a proof-of-concept, I have chosen a pair of components: shopping cart and adding button. This is e-commerce what we\\nare building here :-) My initial goal was to create simple components and demonstrate their reusing as well as introduce\\nRedux as a glue to the components in the data area. As a result, I think I provided a nice and neat structure which\\nhelps a developer to understand what serves what. On the other hand, I tried to keep it simple. In the beginning, there\\nis no need in overcomplicated.\\n\\n\",\"fields\":{\"slug\":\"en/posts/react-redux-simple-project/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Simple yet promising structure for React/Redux project\",\"date\":\"21 November 2016\"}}},{\"node\":{\"excerpt\":\"\\nFirst thing first, I'm staring weekly posts about findings that are somehow related to work. This is a mature but not yet\\nimplemented idea. Although, a friend of mine [Vladimir Starkov sometimes practises the same](https://iamstarkov.com/).\\n\\nIn this issue there are tips on organizing Google Calendar, nice project management addition for GitHub, Styleguide\\nsolutions for React projects and a couple of good reads.\\n\\n\",\"fields\":{\"slug\":\"en/posts/week-44-2016/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Week 44, 2016\",\"date\":\"08 November 2016\"}}},{\"node\":{\"excerpt\":\"\\nWhen it comes to the large web applications, we often operate with complex components. Such components are not just CSS\\nstyles for the pieces of an interface but also their JavaScript interactions and templates. As documentation, the style\\nguide should reflect them all. In other words, the components on the style guide's pages should be the same living as in\\nproduction.\\n\\n\",\"fields\":{\"slug\":\"en/posts/sc5-style-guide-next-level/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Living SC5 Styleguide, the next level\",\"date\":\"23 May 2016\"}}},{\"node\":{\"excerpt\":\"\\nEarlier this year, I participated in a development of a single page application. With the team, we started this\\nproject from scratch. This situation was the most suitable to practice the new technologies.\\n\\nThe stack I've tried was React + ES2015 + postcss + webpack. However, keeping in mind that most of the\\nteam (who were supposed to maintain the project later) are mainly experienced in Angular, I was looking for some\\nsort of combination of these frameworks.\\n\\n\",\"fields\":{\"slug\":\"en/posts/react-angular-project/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Simple React Angular project\",\"date\":\"19 May 2016\"}}},{\"node\":{\"excerpt\":\"\\nBeing a frontend developer these days means to learn the new things every day. We read articles and blog posts,\\nexamine the changelogs, follow the Twitter announcements and participate in the GitHub discussions.\\nThis helps to keep up.\\n\\nHowever,\\nwhen it comes to something bigger, like the exploring of a new framework or an ecosystem, it is not enough.\\nThe perfect solution is to organize a whole day hackathon for the developers in your company.\\nAt SC5 online, we took this advantage mastering the React development. Few ecosystem components such as\\nwebpack and redux came along.\\n\\n\",\"fields\":{\"slug\":\"en/posts/react-hackathon-materials/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Materials for your React hackathon\",\"date\":\"16 April 2016\"}}},{\"node\":{\"excerpt\":\"\\nMy first task for new projects is to create a git repository. Whether it is a new app, or conference slides, or even an\\narticle, I prefer to keep everything in Git. It is an excellent tool, and, personally, I enjoy its command line\\ninterface.\\n\\nHowever, there is always room for improvement. Recently I found an idea how to make my git visualize the changes that\\nI've done to the images in a repository.\\n\\n\",\"fields\":{\"slug\":\"en/posts/image-diffs-with-git/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Visual diffs for the images in a git repo\",\"date\":\"18 March 2016\"}}},{\"node\":{\"excerpt\":\"\\nMy recent huge project was developing a library of CSS and JavaScript components for sharing this code across a lot of\\nweb services and mobile apps. In most cases such work brings up question about how to avoid blocking the processes.\\n\\nThe library has its own flow, and obviously the new things can only appear in new versions. Although I made my best to\\nprovide fast releases, and so the library has them 2-3 times a week, it is still understandable that the library\\ncustomers sometimes cannot wait even an hour.\\n\\nI belive that one of the must-haves of UI library is the freedom which it should give to its customers. You can easily\\nprovide this if practice atomic approach everythere. For example, for the icon fonts.\\n\\n\",\"fields\":{\"slug\":\"en/posts/dealing-atomically-with-icon-fonts/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Dealing atomically with icon fonts\",\"date\":\"10 November 2015\"}}},{\"node\":{\"excerpt\":\"Last week I faced a need to make a fake tag cloud, where the words need to be of different size. This was needed for\\na presentation slide, and as my slides are always in HTML/CSS, must be implemented with these technologies. It is always\\npossible to inject some JavaScript and code anything. But what about pure CSS, do we get random sizes there?\\n\\n\",\"fields\":{\"slug\":\"en/posts/pseudo-tag-cloud-css/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Tag cloud of random sizes in pure CSS\",\"date\":\"02 November 2015\"}}},{\"node\":{\"excerpt\":\"I never thought that I would write a post about diversity. But as the **unicorn law** says that being a woman in tech you\\nwill be eventually speaking about women in tech, I do so now. However I'm doing this not because it is a strong will of\\nmine. Something happened which makes me to respond.\\n\",\"fields\":{\"slug\":\"en/posts/on-the-unicorn-law/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"An answer to the question which should not have been asked\",\"date\":\"07 September 2015\"}}},{\"node\":{\"excerpt\":\"I've been presenting [SC5 Style Guide](http://styleguide.sc5.io/) several times during this year sharing my experience of using it for one\\nof the SC5's clients, Elisa. Assuming that Elisa is a huge mobile operator with a lot of websites and a need\\nto keep those websites visually consistent, there is no wonder that the SC5 Style Guide as a tool provides benefits\\nthere. But what about smaller websites? Would it be useful there? I did not know the answer to this question\\nand wanted to experiment. The experiment was conducted on my blog codebase.\\n\",\"fields\":{\"slug\":\"en/posts/sc5-styleguide-for-smallers/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Style-guide the smaller things\",\"date\":\"30 July 2015\"}}},{\"node\":{\"excerpt\":\"This time I would like to share my experience of keeping a codestyle in one of my working projects. This is about a new\\ntool called **JSCS** which we have recently chosen with the team and now are very pleased with the result.\\n\",\"fields\":{\"slug\":\"en/posts/jscs-in-use/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"JSCS in use\",\"date\":\"11 February 2015\"}}},{\"node\":{\"excerpt\":\"I use the same laptop for both work and personal needs. This is useful but makes me see to keeping my\\nwork-life balance. I do this simply — turn off all the applications running when I finish my working day\\nin the evening. The only issue is not to forget to open them again next day. But this process can be automatized. :-)\\n\",\"fields\":{\"slug\":\"en/posts/run-app-in-time-on-mac/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Run on time (about Mac applications)\",\"date\":\"12 September 2014\"}}},{\"node\":{\"excerpt\":\"Long time ago I could read and learn about web development in Russian only. Later, having completed an English language course, I began to read articles and blogs in English more and more. The same went for conferences: I visited\\nRussian-speaking conferences at first and later switched to English-speaking conferences in Europe. In both articles and conference talks, I noticed how the content was different depending on the language used. Sometime I even thought that the communities evolve in different ways and follow different directions.\\n\",\"fields\":{\"slug\":\"en/posts/frontend-babel-alpha/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"The so different frontend community and how we deal with it\",\"date\":\"30 June 2014\"}}},{\"node\":{\"excerpt\":\"As a mobile apps user you may be already familiar to drawers.\\nThey are quite popular solution for a side menu. Using `Steroids`\\nHTML5/JavaScript framework for hybrid mobile applications, you\\ncan bring such an interface solution into your product very easy.\\n\",\"fields\":{\"slug\":\"en/posts/steroids-drawers/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Using side drawers in mobile apps on Steroids.js\",\"date\":\"09 June 2014\"}}},{\"node\":{\"excerpt\":\"Let me present a stub for **docpad-run** project with\\n**bem-built** static assets. If you ever wanted to be\\na generic blog holder equiped with nice and neat static\\nfiles, here we go.\\n\",\"fields\":{\"slug\":\"en/posts/docpad-with-bem-taste/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Docpad with the taste of BEM\",\"date\":\"04 June 2014\"}}},{\"node\":{\"excerpt\":\"Recently I attended [Front Trends 2014](http://2014.front-trends.com/) in Warsaw.\\nThis is an awesome conference which you should (no, definitely have to!) attend\\nin 2015. Besides incredible main programm Front Trends provides a set of Lighting Talks.\\nThis year I was a part of it presenting [Steroids](http://www.appgyver.com/steroids),\\na framework and a toolkit for developing HTML5 mobile apps. If you did not have\\na chance to hear it, this offline text presentation is for you.\",\"fields\":{\"slug\":\"en/posts/html5-mobile-app-width-native-ui/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"HTML5 mobile apps with native UI on Steroids\",\"date\":\"26 May 2014\"}}},{\"node\":{\"excerpt\":\"The `bem-core` library goes futher and there already is `2.0.0` version\\navailable. This blog was safely switched to the new major version with\\n[some diff to the\\ncode](https://github.com/varya/varya.github.com/commit/f21f810b7cb4e16206ef3d088a8b2c38b615f8f3).\\nNow so can do you. Careful examination of the version changelog will help you\\nwith it. Look how I did this.\",\"fields\":{\"slug\":\"en/posts/switching-to-bem-core-2/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Switching to bem-core#v2\",\"date\":\"16 April 2014\"}}},{\"node\":{\"excerpt\":\"Depending on a project people prefer different ways to adapt BEM.\\nThis results\\ninto a range of tools for our choice. Today, I am translating Maxim Shkalin's\\ndescription of the `BEML` templating pre-processor.\\n\\nWilling to lighten the development with BEM I propose a tiny extension for the\\nHTML syntax (yes, I used to writ all those long CSS classes manually). As the\\nname `BEMHTML` is greedily taken by the Yandex guys, let us call it `BEML`.\",\"fields\":{\"slug\":\"en/posts/beml-html-preprocessor/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"BEML - an HTML preprocessor for BEM\",\"date\":\"09 April 2014\"}}},{\"node\":{\"excerpt\":\"Last week I met the need to develop a web site which static assets have to be\\nhosted on a different server and respond by different URLs than its HTML. This\\nis the requirement to all the static files: stylesheets and JavaScript linked to\\nthe page as well as imges and fonts mentioned in HTML, CSS and JavaScript\\ncode.\",\"fields\":{\"slug\":\"en/posts/borschik-static-assets/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Borschik helps with remote static assets\",\"date\":\"10 March 2014\"}}},{\"node\":{\"excerpt\":\"The recently published [step-by-step tutorial on\\ni-bem.js](http://bem.info/tutorials/articles/bem-js-tutorial/) mentioned **YM\\nmodular system** as a base for component JavaScript solution behind BEM. Why do\\nwe need another modular system? Let us see...\\n\",\"fields\":{\"slug\":\"en/posts/ym-modular-system/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"YM Modular System. Why?\",\"date\":\"25 February 2014\"}}},{\"node\":{\"excerpt\":\"We usually start developing a web site prototyping the interface and then\\nimplementing HTML/CSS and bacis JavaScript. In case\\nof using the full BEM stack a tranformation from prototype to a functioning web\\nsite goes smoothly. You can clone the project from\\n[project-stub](https://github.com/bem/project-stub) and create a static web page\\nas it was [described\\nearlier](http://bem.info/articles/start-with-project-stub/).\\n\",\"fields\":{\"slug\":\"en/posts/javascript-in-bemjson/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"JavaScript in BEMJSON\",\"date\":\"21 January 2014\"}}},{\"node\":{\"excerpt\":\"A couple of days ago I was asked about some basic things of using [BEM project\\nstub](https://github.com/bem/project-stub/tree/14e24fd17ba66a357a2f6fcdce045065b4eb5d6c)\\nfrom someone who is enjoying the full BEM stack (BEM-CSS, i-bem.js and BEMHTML\\ntemplates) for their projects. Answering the questions I promised to turn the\\ninformation into text as we always skip many important things mistakenly\\nconsidering them being primitive.\\n\",\"fields\":{\"slug\":\"en/posts/blocks-and-bundles/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Blocks are bricks, and bundles are buildings\",\"date\":\"06 January 2014\"}}},{\"node\":{\"excerpt\":\"A developer using custom fonts in web (don't say this is evil) usually face a\\ndilemma.\\n\\nThe users' main interest is the content of the page not the\\nview. It is nice to provide it as fast as possible and then apply a custom font.\\nThis blog used to work this way. I provided a script among others in the bundle\\nlinked by the end of the page.\\n\",\"fields\":{\"slug\":\"en/posts/fonts-no-cramp/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Custom fonts with no cramp\",\"date\":\"26 November 2013\"}}},{\"node\":{\"excerpt\":\"There is a well-known front-end pattern which is to have hidden elements in DOM\\nand make them visible when necessary. As with any good pattern, it can be\\ncompromised by wrong implementation.\\n\",\"fields\":{\"slug\":\"en/posts/best-way-to-hide/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"The Best Way to Hide\",\"date\":\"31 October 2013\"}}},{\"node\":{\"excerpt\":\"This article features common problems that developers often face, or maybe used\\nto face before the current open source era, when writing JavaScript for the\\nclient side; showcase of possible solutions to these problems and explanations\\nof my choices.\\n\",\"fields\":{\"slug\":\"en/posts/javascript-component-solutions/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"JavaScript components low basics\",\"date\":\"28 June 2013\"}}},{\"node\":{\"excerpt\":\"\\nAs you might know, I recently run the [BEM\\nLOVE](https://github.com/toivonen/bem-love) project to demonstrate how blocks\\ncan communicate with JavaScript.\",\"fields\":{\"slug\":\"en/posts/patterned-triangle/\",\"prefix\":\"\"},\"frontmatter\":{\"title\":\"Patterned triangles with  CSS\",\"date\":\"19 March 2013\"}}}]}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts.json\n// module id = 735\n// module chunks = 140933230050240"],"sourceRoot":""}
{"version":3,"sources":["webpack:///path---ru-posts-efficient-xslt-techniques-a3c85a3d781e9d315081.js","webpack:///./.cache/json/ru-posts-efficient-xslt-techniques.json"],"names":["webpackJsonp","664","module","exports","data","post","id","html","fields","slug","prefix","disqusIdentifier","frontmatter","title","date","v2","old","tumblr","meta","cover","authornote","site","siteMetadata","siteUrl","pathContext","prev","lang","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,GAAA,uIAAAC,KAAA;AAA60pDC,QAAuCC,KAAA,sCAAAC,OAAA,GAAAC,iBAAA,sCAAiHC,aAAgBC,MAAA,oDAAAC,KAAA,eAAAC,GAAA,KAAAC,KAAA,EAAAC,OAAA,KAAAC,KAAA,KAAAC,MAAA,OAA+IC,YAAed,GAAA,2GAAAC,KAAA,kSAA0Zc,MAASC,cAAgBC,QAAA,sBAA+BC,aAAgBf,KAAA,sCAAAgB,MAAqDnB,GAAA,gIAAAE,QAA+IC,KAAA,+BAAAC,OAAA,GAAAgB,KAAA,KAAAf,iBAAA,+BAA+GC,aAAgBC,MAAA,qCAA4Cc,MAASrB,GAAA,mIAAAE,QAAkJC,KAAA,kCAAAC,OAAA,GAAAgB,KAAA,KAAAf,iBAAA,wCAA2HC,aAAgBC,MAAA","file":"path---ru-posts-efficient-xslt-techniques-a3c85a3d781e9d315081.js","sourcesContent":["webpackJsonp([183095330657117],{\n\n/***/ 664:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"id\":\"/Users/varya/WebDev/Personal/varya.github.com/content/posts/efficient_xslt_techniques/index_ru.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Перевод документа <a href=\\\"http://www.xml.org/sites/www.xml.org/files/xslt_efficient_programming_techniques.pdf\\\">XSLT - Efficient Programming\\nTechniques</a>,\\nкоторый мне очень помог.</p>\\n<p>С ростом популярности XML как средства взаимодействия с различными системами,\\nвсе больше и больше организаций приходят к XML, чтобы решить свои вопросы\\nфункциональной совместимости.<excerpt/> Вместе с попытками архитекторов достигнуть ясного\\nразделения между отображением и бизнес-логикой, XSLT становится важнее. XSL, по\\nсути, - это XML-документ (дерево, согласно спецификации DTD), который\\nприменяется к древовидным структурам данных (XML-документ), чтобы выработать\\nрезультирующее дерево.</p>\\n<p>Эта статья представляет список лучших приемов, используемых для написания\\nXSLT-преобразований. Эта статья может быть использована как направление к\\nлучшему пути достижения нужных результатов в XSL. Она предназначается для\\nразработчиков, которые знакомы с основами XSL, но нуждаются в указателе на\\nдейственный путь программирования на XSL. Информация в этой статье основана на\\nмоём собственном опыте в XML и XSL. Список лучших приемов составлен по различным\\nисточникам, чтобы сделать всеобъемлющий документ, который будет расти, если\\nнайдётся больше хороших приемов. Если у вас есть несколько очень хороших\\nприёмов, которым вы следуете и которых нет в этом списке, скиньте мне на email\\n<em><a href=\\\"mailto:pboundre@gr.com\\\">pboundre@gr.com</a></em>.</p>\\n<h2>Подключение внешних файлов - правильный путь</h2>\\n<p>Есть три способа включения внешних файлов в ваш xsl:</p>\\n<p>Если у вас есть дополнительные HTML-файлы, которые вы хотите включить в ваш\\nрезультат без изменений, возможно самый простой путь получить его в вашем\\nрезультирующем дереве - это включить его как внешнюю синтаксическую сущность\\n(entity) в преобразование. Это влечет за собой объявление сущности и\\nобращение к ней в вашем преобразовании.</p>\\n<p> <strong><code class=\\\"language-text\\\">header.html</code>:</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"html\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>table</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>tr</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>td</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>a</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Home<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>a</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>td</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>td</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>a</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/movies/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Movies<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>a</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>td</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>td</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>a</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/shop/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Shop<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>a</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>td</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>tr</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>table</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p><strong><code class=\\\"language-text\\\">data.xsl</code>:</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xml\\\">\\n      <pre class=\\\"language-xml\\\"><code class=\\\"language-xml\\\"><span class=\\\"token prolog\\\">&lt;?xml version=\\\"1.0\\\"?></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>!DOCTYPE</span> <span class=\\\"token attr-name\\\"><span class=\\\"token namespace\\\">xsl:</span>stylesheet</span> <span class=\\\"token attr-name\\\">[</span>\\n<span class=\\\"token attr-name\\\">&lt;!--</span> <span class=\\\"token attr-name\\\">declares</span> <span class=\\\"token attr-name\\\">header.html</span> <span class=\\\"token attr-name\\\">as</span> <span class=\\\"token attr-name\\\">an</span> <span class=\\\"token attr-name\\\">external</span> <span class=\\\"token attr-name\\\">parsed</span> <span class=\\\"token attr-name\\\">entity</span>\\n<span class=\\\"token attr-name\\\">--</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>!ENTITY</span> <span class=\\\"token attr-name\\\">header</span> <span class=\\\"token attr-name\\\">SYSTEM</span> <span class=\\\"token attr-name\\\">\\\"header.html\\\"</span><span class=\\\"token punctuation\\\">></span></span>\\n]>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token namespace\\\">xsl:</span>stylesheet</span> <span class=\\\"token attr-name\\\">version</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>1.0<span class=\\\"token punctuation\\\">\\\"</span></span>\\n<span class=\\\"token attr-name\\\"><span class=\\\"token namespace\\\">xmlns:</span>xsl</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>http://www.w3.org/1999/XSL/Transform<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token namespace\\\">xsl:</span>template</span> <span class=\\\"token attr-name\\\">match</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>People<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token comment\\\">&lt;!-- includes header.html directly --></span>\\n            <span class=\\\"token entity\\\" title=\\\"&header;\\\">&amp;header;</span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token namespace\\\">xsl:</span>apply-templates</span> <span class=\\\"token punctuation\\\">/></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token namespace\\\">xsl:</span>template</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token namespace\\\">xsl:</span>stylesheet</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p> Или у вас есть дополнительные XML-файле, которые вы хотели бы преобразовать и\\nвключить в документ, над которым вы работаете.</p>\\n<p>Если у вас есть XML-файл, который вы хотели бы включить в результат, вам нужно\\nиспользовать функцию <code class=\\\"language-text\\\">document()</code>, чтобы поучить доступ к информации, и вам нужны\\nшаблоны в вашем преобразовании, чтобы обработать их и включить в результирующее\\nдерево:</p>\\n<p><strong><code class=\\\"language-text\\\">header.xml</code>:</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xml\\\">\\n      <pre class=\\\"language-xml\\\"><code class=\\\"language-xml\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>menu</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>item</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Home<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>item</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>item</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/movies/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Movies<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>item</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>item</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/shop/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Shop<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>item</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>menu</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p><strong><code class=\\\"language-text\\\">data.xsl</code>:</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;?xml version=&quot;1.0&quot;?&gt;\\n&lt;xsl:stylesheet version=&quot;1.0&quot;\\nxmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;\\n    &lt;xsl:template match=&quot;/&quot;&gt;\\n        &lt;html&gt;\\n            &lt;head&gt;&lt;title&gt;People&lt;/title&gt;&lt;/head&gt;\\n            &lt;body&gt;\\n                &lt;!-- applies templates to the information contained in\\n                header.xml --&gt;\\n                &lt;xsl:apply-templates select=&quot;document(&#39;header.xml&#39;)&quot;/&gt;\\n\\n                &lt;!-- applies templates to the input file --&gt;\\n                &lt;xsl:apply-templates /&gt;\\n            &lt;/body&gt;\\n        &lt;/html&gt;\\n    &lt;/xsl:template&gt;\\n\\n    &lt;!-- transforms the XML in header.xml into the table we want --&gt;\\n    &lt;xsl:template match=&quot;menu&quot;&gt;\\n        &lt;table&gt;\\n            &lt;tr&gt;\\n                &lt;xsl:for-each select=&quot;item&quot;&gt;\\n                    &lt;td&gt;&lt;a href=&quot;{@href}&quot;&gt;&lt;xsl:value-of select=&quot;.&quot;/&gt;&lt;/a&gt;&lt;/td&gt;\\n                &lt;/xsl:for-each&gt;\\n            &lt;/tr&gt;\\n        &lt;/table&gt;\\n    &lt;/xsl:template&gt;\\n&lt;/xsl:stylesheet&gt;</code></pre>\\n      </div>\\n<p>Или же у вас есть внешние дополнительные XSLT-файлы, которые вы бы хотели\\nиспользовать, чтобы формировать результирующее дерево:<br/>\\nПусть у вас есть входящий XML-документ, который включает включает некоторую\\nинформацию, нужную вам как и остальные данные на странице, вы захотите\\nимпортировать (import) или включить (include) преобразования для них, так чтобы\\nшаблоны, определённые в них использовались будто они часть основного\\nпреобразования. То, что вам нужно: <code class=\\\"language-text\\\">xsl:import</code> или <code class=\\\"language-text\\\">xsl:include</code> - зависит от того,\\nхотите ли вы переопределять шаблоны (или часть из них), которые заданы во\\nвключаемом преобразовании. Если хотите, используйте xsl:import, в противном\\nслучае - <code class=\\\"language-text\\\">xsl:include</code>.</p>\\n<p><strong><code class=\\\"language-text\\\">data.xml</code>:</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xml\\\">\\n      <pre class=\\\"language-xml\\\"><code class=\\\"language-xml\\\"><span class=\\\"token prolog\\\">&lt;?xml version=\\\"1.0\\\"?></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>doc</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>menu</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>item</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Home<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>item</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>item</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/movies/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Movies<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>item</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>item</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/shop/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Shop<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>item</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>menu</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>people</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>person</span> <span class=\\\"token attr-name\\\">age</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>50<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>larry<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">/></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>person</span> <span class=\\\"token attr-name\\\">age</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>50<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>larry<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>people</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>doc</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p><strong><code class=\\\"language-text\\\">header.xsl</code>:</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;?xml version=&quot;1.0&quot;?&gt;\\n&lt;xsl:stylesheet version=&quot;1.0&quot;\\n  xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;\\n\\n  &lt;xsl:template match=&quot;menu&quot;&gt;\\n    &lt;table&gt;\\n      &lt;tr&gt;\\n        &lt;xsl:for-each select=&quot;item&quot;&gt;\\n          &lt;td&gt;&lt;a href=&quot;{@href}&quot;&gt;&lt;xsl:value-of select=&quot;.&quot; /&gt;&lt;/a&gt;&lt;/td&gt;\\n        &lt;/xsl:for-each&gt;\\n      &lt;/tr&gt;\\n    &lt;/table&gt;\\n  &lt;/xsl:template&gt;\\n\\n&lt;/xsl:stylesheet&gt;</code></pre>\\n      </div>\\n<p><strong><code class=\\\"language-text\\\">data.xsl</code>:</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;?xml version=&quot;1.0&quot;?&gt;\\n&lt;xsl:stylesheet version=&quot;1.0&quot;\\nxmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;\\n\\n  &lt;!-- includes the templates from header.xsl stylesheet --&gt;\\n  &lt;xsl:include href=&quot;header.xsl&quot; /&gt;\\n\\n  &lt;xsl:template match=&quot;/&quot;&gt;\\n    &lt;html&gt;\\n      &lt;head&gt;&lt;title&gt;People&lt;/title&gt;&lt;/head&gt;\\n      &lt;body&gt;\\n\\n        &lt;!-- applies templates to the menu definition to create the\\n          header - the templates come from header.xsl --&gt;\\n        &lt;xsl:apply-templates select=&quot;doc/menu&quot; /&gt;\\n\\n        &lt;!-- applies templates to the data to create the rest of the\\n          document --&gt;\\n        &lt;xsl:apply-templates select=&quot;doc/people&quot; /&gt;\\n\\n      &lt;/body&gt;\\n    &lt;/html&gt;\\n  &lt;/xsl:template&gt;\\n  ...\\n\\n&lt;/xsl:stylesheet&gt;</code></pre>\\n      </div>\\n<p>Вам также стоит иметь преобразование, включающее шаблоны для видоизменения\\nинформации в что-то, что вам нужно.</p>\\n<h2>Используйте XSL шаблоны проектирования (patterns)</h2>\\n<h3>Метод Кая для нахождения пересечения, разности и дизъюнкции множеств</h3>\\n<p>Единственная операция над множествами, предоставляемая XSLT, - это объединение.\\nОно может быть описано с использованием оператора объединения из XPath и XSLT -\\n”<code class=\\\"language-text\\\">|</code>”. Можно выразить пересечение двух наборов узлов (node set) на чистом XPath.\\nЭтот способ был открыт Майклом Каем (Michael Kay) и известен как метод Кая\\n(Kaysian method).</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;xsl:variable name=&quot;intersection&quot; select=&quot;$ns[count(.|$ns2) = count ($ns2)]&quot;/&gt;\\n\\n&lt;xsl:variable name=&quot;set-difference&quot; select=&quot;$ns1[count(.|$ns2) != count($ns2)]&quot;/&gt;</code></pre>\\n      </div>\\n<p>Пример:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;?xml version=&quot;1.0&quot;?&gt;\\n&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;\\n                xmlns:data=&quot;crane&quot; version=&quot;1.0&quot;&gt;\\n    &lt;xsl:output method=&quot;text&quot;/&gt;\\n    &lt;data:data&gt; &lt;!--data source for testing purposes--&gt;\\n        &lt;item&gt;1&lt;/item&gt;&lt;item&gt;2&lt;/item&gt;&lt;item&gt;3&lt;/item&gt;\\n        &lt;item&gt;4&lt;/item&gt;&lt;item&gt;5&lt;/item&gt;&lt;item&gt;6&lt;/item&gt;\\n    &lt;/data:data&gt;\\n\\n    &lt;xsl:template match=&quot;/&quot;&gt; &lt;!--root rule--&gt;\\n        &lt;xsl:variable name=&quot;ns1&quot; select=&quot;//item[position()&gt;1]&quot;/&gt;\\n        &lt;xsl:variable name=&quot;ns2&quot; select=&quot;//item[position()&amp;lt;5]&quot;/&gt;\\n\\n        &lt;xsl:for-each select=&quot;$ns1[count(.|$ns2)=count($ns2)]&quot;&gt;\\n            Intersection: &lt;xsl:value-of select=&quot;.&quot;/&gt;\\n        &lt;/xsl:for-each&gt;\\n\\n        &lt;xsl:for-each select=&quot;(\\n                        $ns1[count(.|$ns2)!=count($ns2)] |\\n                        $ns2[count(.|$ns1)!=count($ns1)]\\n                        )&quot;&gt;\\n            Difference: &lt;xsl:value-of select=&quot;.&quot;/&gt;\\n        &lt;/xsl:for-each&gt;\\n    &lt;/xsl:template&gt;\\n&lt;/xsl:stylesheet&gt;</code></pre>\\n      </div>\\n<p>Результат:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Intersection: 2\\nIntersection: 3\\nIntersection: 4\\nDifference: 1\\nDifference: 5\\nDifference: 6</code></pre>\\n      </div>\\n<h3>Метод Вендела Пая для нерекурсивного цикла</h3>\\n<p>Метод Вендела Пая (Wendell Pie) демонстрирует способ избежать XSLT-рекурсии при\\nприменении циклов.</p>\\n<p>Пример:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xml\\\">\\n      <pre class=\\\"language-xml\\\"><code class=\\\"language-xml\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Tag</span> <span class=\\\"token attr-name\\\">ID</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>1<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Value</span><span class=\\\"token punctuation\\\">></span></span>4<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Value</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Tag</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Tag</span> <span class=\\\"token attr-name\\\">ID</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>2<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Value</span><span class=\\\"token punctuation\\\">></span></span>2<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Value</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Tag</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>Требующийся результат:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"html\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TABLE</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TR</span> <span class=\\\"token attr-name\\\">ID</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>1<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TD</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TD</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TD</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TD</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TD</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TD</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TD</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TD</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TR</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TABLE</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TABLE</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TR</span> <span class=\\\"token attr-name\\\">ID</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>2<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TD</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TD</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TD</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TD</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TR</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TABLE</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>Другими словами, я хочу создать набор новых узлов, количество которых основано\\nна значении Value, содержащемся в документе. Ниже я представляю маленькое\\nобобщение,  которое не  зависит от числа узлов в исходном XML-документе и\\nиспользует вместо этого число узлов в преобразовании:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;xsl:template match=&quot;TAG&quot;&gt;\\n&lt;TABLE&gt;\\n  &lt;TR ID=&quot;@ID&quot;&gt;\\n    &lt;xsl:for-each select=&quot;(document(&#39;&#39;)//*)[position() &amp;lt;= Value]&quot;&gt;\\n      &lt;TD&gt; &lt;/TD&gt;\\n    &lt;/xsl:for-each&gt;\\n  &lt;/TR&gt;\\n&lt;/TABLE&gt;\\n&lt;/xsl:template&gt;</code></pre>\\n      </div>\\n<p>Здесь используется количество элементов в преобразовании. Это количество будет\\nзначительно превышено, если мы будем проверять на разные типы узлов, например:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;xsl:for-each\\n  select=&quot;($st//node()| $st//@* | $st//namespace::*) [position() &amp;lt;= Value]&quot;&gt;</code></pre>\\n      </div>\\n<p>где <code class=\\\"language-text\\\">$st</code> определено как  <code class=\\\"language-text\\\">document(&#39;&#39;)</code>, то есть корневой узел преобразования.</p>\\n<h3>Метод условной выборки Оливера Беккера</h3>\\n<p>Воможность XPath выбирать список узлов, основываясь на сложных условиях, очень\\nмощная. Хотя ей недостаёт возможностей для определения строки как\\nпротивоположного набору узлов. Вам часто нужно использовать навороченную\\nxsl:choose конструкцию только чтобы определить, что-то вроде “в случае 1\\nиспользуй строку 1, в случае 2 - строку 2, …, в случае N - строку N.?</p>\\n<p>Во всех таких случаях нам нужен способ, который позволил бы нам определять в\\nXPath-выражении строку, которая зависит от условия или условий.</p>\\n<p>Теперь о том, как это сделать:<br/>\\nМы хотим получить XPath-выражение, которое возвращает строку, когда некоторое\\nзаданное условие истинно, и возвращает пустую строку, если это условие ложно.\\nМожно условиться, что true - это “1”, а false - это “0”. Но как подогнать “1” к\\nкакой-то строке? Какую функцию для работы со строкой мы могли бы использовать?\\n<em>substring()</em> кажется достаточно удобной. А вот и трюк: мы можем\\nиспользовать substring() только с двумя аргументами: substring(str, nOffset)\\nвозвратит остаток строки str, начинающийся с позиции nOffset.</p>\\n<p>В частности:<br/></p>\\n<ul>\\n<li><code class=\\\"language-text\\\">substring(str, 1)</code> возвращает целую строку</li>\\n<li><code class=\\\"language-text\\\">substring(str, [очень большое число])</code> возвратит пустую строку, если это\\nбольшое число гарантированно больше, чем длина строки.</li>\\n</ul>\\n<p>Таким образом, выражение, которое мы могли бы использовать, будет:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token function\\\">substring</span><span class=\\\"token punctuation\\\">(</span> str1<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">exp</span><span class=\\\"token punctuation\\\">(</span> условие <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">substring</span><span class=\\\"token punctuation\\\">(</span> str2<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">exp</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token function\\\">not</span><span class=\\\"token punctuation\\\">(</span>условие<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>и мы хотим, чтобы <code class=\\\"language-text\\\">exp(условие)</code> было 1, если условие истинное и Infinity, если\\nусловие ложное.</p>\\n<p>Мы выражаем exp(условие) так:<br/>\\n<code class=\\\"language-text\\\">1 div условие</code>, потому что булево значение сначала преобразуется в число (true</p>\\n<ul>\\n<li>в 1, а false - в 0), мы получим в точности:</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token function\\\">exp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n<span class=\\\"token function\\\">exp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> Infinity</code></pre>\\n      </div>\\n<p>Итог:<br/>\\nXPath-выражение, возвращающее одну строку, если условие истинно и другую, если\\nоно ложно, такое:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token function\\\">substring</span><span class=\\\"token punctuation\\\">(</span>Str1<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span> div условие<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">substring</span><span class=\\\"token punctuation\\\">(</span>Str2<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span> div условие<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Впервые это было использовано Оливером Беккером (Oliver Becker) и названо как\\nметод Беккера.</p>\\n<p>Например:<br/>\\nЯ хочу написать темплейт, который создаёт текст: “My department”,  если передан\\nпараметр “IT” и текст “Some other department”, если значение параметра другое.</p>\\n<p>Конечно, никаких <code class=\\\"language-text\\\">xsl:if</code> или <code class=\\\"language-text\\\">xsl:when</code> не допускается.</p>\\n<p>Пример кода:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;?xml version=&quot;1.0&quot;?&gt;\\n&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;\\n                xmlns:data=&quot;crane&quot; version=&quot;1.0&quot;&gt;\\n\\n  &lt;xsl:output method=&quot;text&quot;/&gt;\\n\\n  &lt;xsl:template match=&quot;/&quot;&gt;\\n    IT:\\n    &lt;xsl:call-template name=&quot;whoIs&quot;&gt;\\n      &lt;xsl:with-param name=&quot;department&quot; select=&quot;&#39;IT&#39;&quot; /&gt;\\n    &lt;/xsl:call-template&gt;\\n    &lt;br/&gt;\\n    Finance:\\n    &lt;xsl:call-template name=&quot;whoIs&quot;&gt;\\n      &lt;xsl:with-param name=&quot;department&quot; select=&quot;&#39;Finance&#39;&quot; /&gt;\\n    &lt;/xsl:call-template&gt;\\n  &lt;/xsl:template&gt;\\n\\n  &lt;xsl:template name=&quot;whoIs&quot;&gt;\\n    &lt;xsl:param name=&quot;department&quot; select=&quot;someDepartment&quot; /&gt;\\n    &lt;br/&gt;\\n    &lt;xsl:value-of select=&quot;\\n      concat(\\n        substring(&#39;My department&#39;, 1 div ($department = &#39;IT&#39;)),\\n        substring(&#39;Some other department&#39;, 1 div not(($department = &#39;IT&#39;)))\\n      )&quot; /&gt;\\n    &lt;br/&gt;\\n  &lt;/xsl:template&gt;\\n&lt;/xsl:stylesheet&gt;</code></pre>\\n      </div>\\n<h3>Используйте метод Мюнха для группировки</h3>\\n<p>Группировка часто плохо осуществляется в XSL. Обычно эта задача возникает, когда\\nвы получаете XML-вывод (несгруппированный) из базы данных и должны сгруппировать\\nего средствами XSL. База данных обычно выдаёт вам результаты, структурированные\\nсогласно записям в ней. Например, давайте рассмотрим таблицу служащих, из\\nкоторой получается такой XML:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xml\\\">\\n      <pre class=\\\"language-xml\\\"><code class=\\\"language-xml\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>data</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>employee</span> <span class=\\\"token attr-name\\\">no</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>1<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>name</span><span class=\\\"token punctuation\\\">></span></span>Prathit Bondre<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>name</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>department</span><span class=\\\"token punctuation\\\">></span></span>IT<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>department</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>employee</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>employee</span> <span class=\\\"token attr-name\\\">no</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>2<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>name</span><span class=\\\"token punctuation\\\">></span></span>Adheet Bondre<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>name</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>department</span><span class=\\\"token punctuation\\\">></span></span>Finance<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>department</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>employee</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>employee</span> <span class=\\\"token attr-name\\\">no</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>3<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>name</span><span class=\\\"token punctuation\\\">></span></span>Sinan Edil<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>name</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>department</span><span class=\\\"token punctuation\\\">></span></span>IT<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>department</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>employee</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>employee</span> <span class=\\\"token attr-name\\\">no</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>4<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>name</span><span class=\\\"token punctuation\\\">></span></span>Jeremy King<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>name</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>department</span><span class=\\\"token punctuation\\\">></span></span>Finance<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>department</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>employee</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>data</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>Требуется такой вывод:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">&lt;strong&gt;Finance&lt;/strong&gt;\\nAdheet Bondre\\nJeremy King\\n\\n&lt;strong&gt;IT&lt;/strong&gt;\\nPrathit Bondre\\nSinan Edil</code></pre>\\n      </div>\\n<p>Задача состоит в том, чтобы превратить этот плоский вывод в список,\\nсгруппированный по департаментам, чтобы дать требуемый результат, который\\nпоказан выше.</p>\\n<p>Есть два шага на пути к решению:</p>\\n<ul>\\n<li>Узнать, какие департаменты существуют</li>\\n<li>Получить всех служащих, которые относятся к одному департаменту</li>\\n</ul>\\n<p>Узнать, какие департаменты существуют, можно выбрав по одному сотруднику из\\nкаждого департамента в XML, который может с успехом быть первым, кто попадётся.\\nОдин способ найти их - это взять тех сотрудников, которые не относятся к\\nдепартаменту из множества департаментов предыдущих сотрудников.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">employee[not(department = preceding-sibling::employee/department)]</code></pre>\\n      </div>\\n<p>Определив таких сотрудников, легко найти их департаменты и собрать вместе всех\\nсотрудников из одного и того же департамента:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;xsl:apply-template\\n  select=&quot;data/employee[department = current()/department]&quot;/&gt;</code></pre>\\n      </div>\\n<p>Проблема этого метода в том, что он включает в себя два XPath-выражения,\\nвычисление которых потребует много ресурсов для больших XML-документов. Поиск по\\nвсем предыдущим братьям с осью ‘preceding-sibling’ занимает много времени, если\\nвы ближе к конце записей. Кроме того, получение всех контактов определённых\\nдепартаментов каждый раз включает в себя поиск одного сотрудника.</p>\\n<h4>Метод Мюнха</h4>\\n<p>Этот метод разработан Стивом Мюнхом (Steve Muench) для представления этих\\nфункций более эффективным способом с использованием ключей. Ключи работают путём\\nназначения значения ключа узлу и дают прямой доступ к узлу через такое значение.\\nЕсли элементов, у которых один и тот же ключ, много, то все эти элементы\\nнайдутся, когда вы воспользуетесь этим ключом. В сущности, это означает, что\\nесли вы хотите сгруппировать множество узлов согласно какому-то свойству узла,\\nвы можете использовать ключи.</p>\\n<p>В примере выше мы хотим сгруппировать сотрудников согласно их департаментам,\\nпоэтому мы создаём ключ, который назначает каждому сотруднику значение ключа,\\nкоторое берётся из департамента этого сотрудника. Узлы, которые мы хотим\\nсгруппировать должны быть подставлены в атрибут “match”. Значение ключа, которые\\nмы хотим использовать записывается в атрибут “use”.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;xsl:key name=&quot;employees-by-department&quot; match=&quot;employee&quot; use=&quot;department&quot;/&gt;</code></pre>\\n      </div>\\n<p>Однажды определив ключ, зная департамент, мы можем быстро получить доступ ко\\nвсем сотрудникам этого департамента.<br/>\\nНапример, ключ <code class=\\\"language-text\\\">key(&#39;employees-by-department&#39;, &#39;IT&#39;)</code> даст записи с\\nдепартаментом “IT”.</p>\\n<p>Однако, первое, что нам надо сделать,- это определить, какие бывают\\nдепартаменты, что включает в себя нахождение первого сотрудника в XML для\\nкаждого департамента. Здесь мы снова можем использовать ключи. Мы знаем, что\\nсотрудник будет частью списка узлов, которые можно получить по ключу данного\\nдепартамента: вопрос в том, будет ли он первым в этом списке (который упорядочен\\nкак записи в XML-документе) или ниже? Нас интересуют только записи, идущие\\nпервыми в списке.<br/>\\nВыяснение, является ли сотрудник первым в списке, возвращённом по ключу,\\nподразумевает сравнение узла employee с первым узлом в списке. Этот способ также\\nможет быть использован для получения отдельных элементов в XML-файле. Есть пара\\nхарактерных способов проверки, идентичны ли два узла:</p>\\n<ul>\\n<li>Сравнить уникальные идентификаторы, сгенерированные для узлов (используя\\n<code class=\\\"language-text\\\">generate-id()</code>):</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">employee[generate-id() = generate-id(key(&#39;employees-by-department&#39;, department)[1])]</code></pre>\\n      </div>\\n<ul>\\n<li>Посмотреть, сколько узлов включает в себя результат объединения двух узлов:\\nодин или два - узлы не могут повторяться во множестве, так что если там\\nтолько один узел, то они должны быть одним и тем же узлом:</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">employee[count(.|key(&#39;employees-by-department&#39;, department)[1]) = 1]</code></pre>\\n      </div>\\n<p>Однажды определив группы, вы можете отсортировать их так, как вам нравится.\\nТакже вы можете отсортировать узлы в рамках группы так, как вы хотите. Вот\\nшаблон, который создаёт результат, который мы описали, из XML, полученного из\\nбазы данных:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;?xml version=&quot;1.0&quot;?&gt;\\n&lt;xsl:stylesheet version=&quot;1.0&quot;\\n  xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;\\n\\n  &lt;xsl:output method = &quot;html&quot; encoding=&quot;Windows-1252&quot; /&gt;\\n  &lt;xsl:key name = &quot;employees-by-department&quot; match =&quot;employee&quot; use = &quot;department&quot; /&gt;\\n\\n  &lt;xsl:template match=&quot;data&quot;&gt;\\n    &lt;html&gt;\\n      &lt;head&gt;&lt;/head&gt;\\n      &lt;body&gt;\\n        &lt;xsl:for-each select = &quot;employee[count(.|key(&#39;employees-bydepartment&#39;,\\ndepartment)[1])=1]&quot;&gt;\\n          &lt;xsl:sort select=&quot;department&quot; /&gt;\\n          &lt;b&gt;&lt;u&gt;&lt;xsl:value-of select=&quot;department&quot; /&gt;&lt;/u&gt;&lt;/b&gt;&lt;br/&gt;\\n            &lt;xsl:for-each select=&quot;key(&#39;employees-bydepartment&#39;,\\ndepartment)&quot;&gt;\\n              &lt;xsl:sort select=&quot;name&quot;/&gt;\\n              &lt;xsl:value-of select=&quot;name&quot; /&gt;&lt;br/&gt;\\n            &lt;/xsl:for-each&gt;\\n          &lt;/xsl:for-each&gt;\\n        &lt;/body&gt;\\n      &lt;/html&gt;\\n  &lt;/xsl:template&gt;\\n\\n&lt;/xsl:stylesheet&gt;</code></pre>\\n      </div>\\n<p>Метод Мюнха обычно лучше использовать для группировки узлов из XML-документа,\\nпотому что он не подразумевает прохождения через большое число узлов, и поэтому\\nон более эффективен. Он особенно полезен, когда у вас есть плоская выдача из\\nбазы данных, например, которую вам нужно преобразовать в какую-нибудь\\nиерархичную структуру. Он может быть применён в любой ситуации, где нужно\\nгруппировать узлы согласно их свойствам, которые можно получить через\\nXPath.</p>\\n<p>Обратная сторона состоит в том, что метод Мюнха будет работать только с\\nXSLT-процессором, поддерживающим ключи. Вдобавок, использование ключей может\\nбыть достаточно затратным по памяти, потому что все узлы и их ключи хранятся в\\nпамяти. Наконец, может быть трудно использовать ключи, если узлы, которые вы\\nхотите сгруппировать, получены из разных подключенных источников.</p>\\n<h2>Использование xsl:import</h2>\\n<p>Используйте <code class=\\\"language-text\\\">&lt;xsl:import&gt;</code>, чтобы подключить общие, основные правила в\\nпреобразование, задуманное для определённых трансформаций. Если можете, не\\nимпортируйте больше шаблонов, чем вам нужно.</p>\\n<h2>Использование статического HTML</h2>\\n<p>Для любых “неизменных” порций html на странице (таких как шапка, подвал,\\nэлементы навигации) определённо более эффективно хранить фрагменты как внешние\\nxml-файлы и копировать их в результирующее дерево используя <code class=\\\"language-text\\\">xsl:copy-of</code> и\\nфункцию <code class=\\\"language-text\\\">document()</code>, чем использовать именованные шаблоны или <code class=\\\"language-text\\\">xsl:import</code>.</p>\\n<h2>Разница между call и apply templates</h2>\\n<p>Call-template, в отличие от aplly-templates, не меняет контекстный (текущий)\\nузел. И атрибут select имеет значение только в aplly-templates, и не имеет в\\ncall-template.</p>\\n<h2>Повторное использование кода и рефакторинг</h2>\\n<p>Проблема с использованием одного темплейта с множеством условий - это то, что\\nочень быстро делает код отвратительным, нечитаемым и неподддерживаемым. Проблема\\nмногих шаблонов состоит в том, что вы часто дублируете код. Золотая середина -\\nиспользовать много шаблонов, а при необходимости повторить код - вызывать\\nименованные шаблоны, иногда с параметрами, если имеют место небольшие изменения,\\nкоторые должны быть учтены. Именованные шаблоны похожи на подпрограммы или\\nприватные методы.</p>\\n<p>Например. Допустим, вы хотите обработать элементы item, имея один шаблон для\\nузлов со значением атрибута type - ‘Book’, один - для ‘CD’, и один для всех\\nостальных.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;xsl:template match=&quot;item[@type=&#39;Book&#39;]&quot;/&gt;\\n&lt;xsl:template match=&quot;item[@type=&#39;CD&#39;]&quot;/&gt;\\n&lt;xsl:template match=&quot;item&quot;/&gt;</code></pre>\\n      </div>\\n<p>И они переопределят шаблон, привязанный к ”*” (любой элемент). Шаблоны с более\\nточной адресацией будут иметь более высокий приоритет для сопоставления.</p>\\n<h2>Автоматизируйте XSL-документацию</h2>\\n<p>Программисты обычно ненавидят документацию и поэтому обычно не пишут её.\\nJavadocs в Java даёт большое утешение программистскому сообществу, обеспечивая\\nспособ автоматически генерировать документацию. Есть похожий инструмент, который\\nнаписан для XSL и называется xsldoc. Его можно бесплатно скачать на\\n<a href=\\\"http://www.xsldoc.org/\\\">www.xsldoc.org</a>.</p>\\n<p>Этот инструмент обеспечит автоматизированный, стандартизированный и надежный\\nспособ создания документации о ваших XSL-файлах, и поскольку он управляется из\\nкомандной строки, то может стать частью процесса сборки.</p>\\n<h2>Не изобретайте велосипед, используйте XSLT-библиотеку</h2>\\n<p>XSLT-библиотека - это open source репозиторий XSL-шаблонов, которые были\\nнаписаны и проверены. В библиотеке множество шаблонов для работы со строками,\\nдатами, обработки узлов и т.п., что может быть эффективно использовано в ваших\\nxsl-файлах. Так что сэкономьте своё время с этой библиотекой. Её можно\\nпосмотреть по адресу <a href=\\\"http://xsltsl.sourceforge.net\\\">http://xsltsl.sourceforge.net</a>.</p>\\n<h2>Уменьшайте размер ваших HTML-документов</h2>\\n<p>Уменьшайте размер вашего HTML, используя <code class=\\\"language-text\\\">indent=&quot;no&quot;</code> в теге\\n<code class=\\\"language-text\\\">&lt;xsl:output/&gt;</code>. Этот атрибут сообщает XSLT-процессору не делать отступы в\\nHTML-документе, что делает файлы меньше и они грузятся быстрее.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;xsl:output method=&quot;html&quot; indent=&quot;no&quot;/&gt;</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"ru/posts/efficient_xslt_techniques/\",\"prefix\":\"\",\"disqusIdentifier\":\"ru-posts-efficient_xslt_techniques\"},\"frontmatter\":{\"title\":\"XSLT - результативные технологии программирования\",\"date\":\"25 July 2009\",\"v2\":null,\"old\":true,\"tumblr\":null,\"meta\":null,\"cover\":null}},\"authornote\":{\"id\":\"/Users/varya/WebDev/Personal/varya.github.com/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Mr. Gatsby</strong> Proin ornare ligula eu tellus tempus elementum. Aenean <a href=\\\"/\\\">bibendum</a> iaculis mi, nec blandit lacus interdum vitae. Vestibulum non nibh risus, a scelerisque purus. Blandit lacus interdum vitae. Vestibulum non nibh risus, a scelerisque purus.</p>\"},\"site\":{\"siteMetadata\":{\"siteUrl\":\"http://varya.me/\"}}},\"pathContext\":{\"slug\":\"ru/posts/efficient_xslt_techniques/\",\"prev\":{\"id\":\"/Users/varya/WebDev/Personal/varya.github.com/content/posts/first-steroids-app/index_ru.md absPath of file >>> MarkdownRemark\",\"fields\":{\"slug\":\"ru/posts/first-steroids-app/\",\"prefix\":\"\",\"lang\":\"ru\",\"disqusIdentifier\":\"ru-posts-first-steroids-app\"},\"frontmatter\":{\"title\":\"Мобильное приложение на Steroids\"}},\"next\":{\"id\":\"/Users/varya/WebDev/Personal/varya.github.com/content/posts/docpad-with-bem-taste/index_en.md absPath of file >>> MarkdownRemark\",\"fields\":{\"slug\":\"en/posts/docpad-with-bem-taste/\",\"prefix\":\"\",\"lang\":\"en\",\"disqusIdentifier\":\"posts-docpad-with-bem-taste-index-en\"},\"frontmatter\":{\"title\":\"Docpad with the taste of BEM\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---ru-posts-efficient-xslt-techniques-a3c85a3d781e9d315081.js","module.exports = {\"data\":{\"post\":{\"id\":\"/Users/varya/WebDev/Personal/varya.github.com/content/posts/efficient_xslt_techniques/index_ru.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Перевод документа <a href=\\\"http://www.xml.org/sites/www.xml.org/files/xslt_efficient_programming_techniques.pdf\\\">XSLT - Efficient Programming\\nTechniques</a>,\\nкоторый мне очень помог.</p>\\n<p>С ростом популярности XML как средства взаимодействия с различными системами,\\nвсе больше и больше организаций приходят к XML, чтобы решить свои вопросы\\nфункциональной совместимости.<excerpt/> Вместе с попытками архитекторов достигнуть ясного\\nразделения между отображением и бизнес-логикой, XSLT становится важнее. XSL, по\\nсути, - это XML-документ (дерево, согласно спецификации DTD), который\\nприменяется к древовидным структурам данных (XML-документ), чтобы выработать\\nрезультирующее дерево.</p>\\n<p>Эта статья представляет список лучших приемов, используемых для написания\\nXSLT-преобразований. Эта статья может быть использована как направление к\\nлучшему пути достижения нужных результатов в XSL. Она предназначается для\\nразработчиков, которые знакомы с основами XSL, но нуждаются в указателе на\\nдейственный путь программирования на XSL. Информация в этой статье основана на\\nмоём собственном опыте в XML и XSL. Список лучших приемов составлен по различным\\nисточникам, чтобы сделать всеобъемлющий документ, который будет расти, если\\nнайдётся больше хороших приемов. Если у вас есть несколько очень хороших\\nприёмов, которым вы следуете и которых нет в этом списке, скиньте мне на email\\n<em><a href=\\\"mailto:pboundre@gr.com\\\">pboundre@gr.com</a></em>.</p>\\n<h2>Подключение внешних файлов - правильный путь</h2>\\n<p>Есть три способа включения внешних файлов в ваш xsl:</p>\\n<p>Если у вас есть дополнительные HTML-файлы, которые вы хотите включить в ваш\\nрезультат без изменений, возможно самый простой путь получить его в вашем\\nрезультирующем дереве - это включить его как внешнюю синтаксическую сущность\\n(entity) в преобразование. Это влечет за собой объявление сущности и\\nобращение к ней в вашем преобразовании.</p>\\n<p> <strong><code class=\\\"language-text\\\">header.html</code>:</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"html\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>table</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>tr</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>td</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>a</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Home<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>a</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>td</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>td</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>a</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/movies/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Movies<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>a</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>td</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>td</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>a</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/shop/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Shop<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>a</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>td</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>tr</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>table</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p><strong><code class=\\\"language-text\\\">data.xsl</code>:</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xml\\\">\\n      <pre class=\\\"language-xml\\\"><code class=\\\"language-xml\\\"><span class=\\\"token prolog\\\">&lt;?xml version=\\\"1.0\\\"?></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>!DOCTYPE</span> <span class=\\\"token attr-name\\\"><span class=\\\"token namespace\\\">xsl:</span>stylesheet</span> <span class=\\\"token attr-name\\\">[</span>\\n<span class=\\\"token attr-name\\\">&lt;!--</span> <span class=\\\"token attr-name\\\">declares</span> <span class=\\\"token attr-name\\\">header.html</span> <span class=\\\"token attr-name\\\">as</span> <span class=\\\"token attr-name\\\">an</span> <span class=\\\"token attr-name\\\">external</span> <span class=\\\"token attr-name\\\">parsed</span> <span class=\\\"token attr-name\\\">entity</span>\\n<span class=\\\"token attr-name\\\">--</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>!ENTITY</span> <span class=\\\"token attr-name\\\">header</span> <span class=\\\"token attr-name\\\">SYSTEM</span> <span class=\\\"token attr-name\\\">\\\"header.html\\\"</span><span class=\\\"token punctuation\\\">></span></span>\\n]>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token namespace\\\">xsl:</span>stylesheet</span> <span class=\\\"token attr-name\\\">version</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>1.0<span class=\\\"token punctuation\\\">\\\"</span></span>\\n<span class=\\\"token attr-name\\\"><span class=\\\"token namespace\\\">xmlns:</span>xsl</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>http://www.w3.org/1999/XSL/Transform<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token namespace\\\">xsl:</span>template</span> <span class=\\\"token attr-name\\\">match</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>People<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token comment\\\">&lt;!-- includes header.html directly --></span>\\n            <span class=\\\"token entity\\\" title=\\\"&header;\\\">&amp;header;</span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token namespace\\\">xsl:</span>apply-templates</span> <span class=\\\"token punctuation\\\">/></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token namespace\\\">xsl:</span>template</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span><span class=\\\"token namespace\\\">xsl:</span>stylesheet</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p> Или у вас есть дополнительные XML-файле, которые вы хотели бы преобразовать и\\nвключить в документ, над которым вы работаете.</p>\\n<p>Если у вас есть XML-файл, который вы хотели бы включить в результат, вам нужно\\nиспользовать функцию <code class=\\\"language-text\\\">document()</code>, чтобы поучить доступ к информации, и вам нужны\\nшаблоны в вашем преобразовании, чтобы обработать их и включить в результирующее\\nдерево:</p>\\n<p><strong><code class=\\\"language-text\\\">header.xml</code>:</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xml\\\">\\n      <pre class=\\\"language-xml\\\"><code class=\\\"language-xml\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>menu</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>item</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Home<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>item</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>item</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/movies/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Movies<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>item</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>item</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/shop/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Shop<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>item</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>menu</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p><strong><code class=\\\"language-text\\\">data.xsl</code>:</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;?xml version=&quot;1.0&quot;?&gt;\\n&lt;xsl:stylesheet version=&quot;1.0&quot;\\nxmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;\\n    &lt;xsl:template match=&quot;/&quot;&gt;\\n        &lt;html&gt;\\n            &lt;head&gt;&lt;title&gt;People&lt;/title&gt;&lt;/head&gt;\\n            &lt;body&gt;\\n                &lt;!-- applies templates to the information contained in\\n                header.xml --&gt;\\n                &lt;xsl:apply-templates select=&quot;document(&#39;header.xml&#39;)&quot;/&gt;\\n\\n                &lt;!-- applies templates to the input file --&gt;\\n                &lt;xsl:apply-templates /&gt;\\n            &lt;/body&gt;\\n        &lt;/html&gt;\\n    &lt;/xsl:template&gt;\\n\\n    &lt;!-- transforms the XML in header.xml into the table we want --&gt;\\n    &lt;xsl:template match=&quot;menu&quot;&gt;\\n        &lt;table&gt;\\n            &lt;tr&gt;\\n                &lt;xsl:for-each select=&quot;item&quot;&gt;\\n                    &lt;td&gt;&lt;a href=&quot;{@href}&quot;&gt;&lt;xsl:value-of select=&quot;.&quot;/&gt;&lt;/a&gt;&lt;/td&gt;\\n                &lt;/xsl:for-each&gt;\\n            &lt;/tr&gt;\\n        &lt;/table&gt;\\n    &lt;/xsl:template&gt;\\n&lt;/xsl:stylesheet&gt;</code></pre>\\n      </div>\\n<p>Или же у вас есть внешние дополнительные XSLT-файлы, которые вы бы хотели\\nиспользовать, чтобы формировать результирующее дерево:<br/>\\nПусть у вас есть входящий XML-документ, который включает включает некоторую\\nинформацию, нужную вам как и остальные данные на странице, вы захотите\\nимпортировать (import) или включить (include) преобразования для них, так чтобы\\nшаблоны, определённые в них использовались будто они часть основного\\nпреобразования. То, что вам нужно: <code class=\\\"language-text\\\">xsl:import</code> или <code class=\\\"language-text\\\">xsl:include</code> - зависит от того,\\nхотите ли вы переопределять шаблоны (или часть из них), которые заданы во\\nвключаемом преобразовании. Если хотите, используйте xsl:import, в противном\\nслучае - <code class=\\\"language-text\\\">xsl:include</code>.</p>\\n<p><strong><code class=\\\"language-text\\\">data.xml</code>:</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xml\\\">\\n      <pre class=\\\"language-xml\\\"><code class=\\\"language-xml\\\"><span class=\\\"token prolog\\\">&lt;?xml version=\\\"1.0\\\"?></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>doc</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>menu</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>item</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Home<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>item</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>item</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/movies/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Movies<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>item</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>item</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>/shop/<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>Shop<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>item</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>menu</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>people</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>person</span> <span class=\\\"token attr-name\\\">age</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>50<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>larry<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">/></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>person</span> <span class=\\\"token attr-name\\\">age</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>50<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>larry<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">/></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>people</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>doc</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p><strong><code class=\\\"language-text\\\">header.xsl</code>:</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;?xml version=&quot;1.0&quot;?&gt;\\n&lt;xsl:stylesheet version=&quot;1.0&quot;\\n  xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;\\n\\n  &lt;xsl:template match=&quot;menu&quot;&gt;\\n    &lt;table&gt;\\n      &lt;tr&gt;\\n        &lt;xsl:for-each select=&quot;item&quot;&gt;\\n          &lt;td&gt;&lt;a href=&quot;{@href}&quot;&gt;&lt;xsl:value-of select=&quot;.&quot; /&gt;&lt;/a&gt;&lt;/td&gt;\\n        &lt;/xsl:for-each&gt;\\n      &lt;/tr&gt;\\n    &lt;/table&gt;\\n  &lt;/xsl:template&gt;\\n\\n&lt;/xsl:stylesheet&gt;</code></pre>\\n      </div>\\n<p><strong><code class=\\\"language-text\\\">data.xsl</code>:</strong></p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;?xml version=&quot;1.0&quot;?&gt;\\n&lt;xsl:stylesheet version=&quot;1.0&quot;\\nxmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;\\n\\n  &lt;!-- includes the templates from header.xsl stylesheet --&gt;\\n  &lt;xsl:include href=&quot;header.xsl&quot; /&gt;\\n\\n  &lt;xsl:template match=&quot;/&quot;&gt;\\n    &lt;html&gt;\\n      &lt;head&gt;&lt;title&gt;People&lt;/title&gt;&lt;/head&gt;\\n      &lt;body&gt;\\n\\n        &lt;!-- applies templates to the menu definition to create the\\n          header - the templates come from header.xsl --&gt;\\n        &lt;xsl:apply-templates select=&quot;doc/menu&quot; /&gt;\\n\\n        &lt;!-- applies templates to the data to create the rest of the\\n          document --&gt;\\n        &lt;xsl:apply-templates select=&quot;doc/people&quot; /&gt;\\n\\n      &lt;/body&gt;\\n    &lt;/html&gt;\\n  &lt;/xsl:template&gt;\\n  ...\\n\\n&lt;/xsl:stylesheet&gt;</code></pre>\\n      </div>\\n<p>Вам также стоит иметь преобразование, включающее шаблоны для видоизменения\\nинформации в что-то, что вам нужно.</p>\\n<h2>Используйте XSL шаблоны проектирования (patterns)</h2>\\n<h3>Метод Кая для нахождения пересечения, разности и дизъюнкции множеств</h3>\\n<p>Единственная операция над множествами, предоставляемая XSLT, - это объединение.\\nОно может быть описано с использованием оператора объединения из XPath и XSLT -\\n”<code class=\\\"language-text\\\">|</code>”. Можно выразить пересечение двух наборов узлов (node set) на чистом XPath.\\nЭтот способ был открыт Майклом Каем (Michael Kay) и известен как метод Кая\\n(Kaysian method).</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;xsl:variable name=&quot;intersection&quot; select=&quot;$ns[count(.|$ns2) = count ($ns2)]&quot;/&gt;\\n\\n&lt;xsl:variable name=&quot;set-difference&quot; select=&quot;$ns1[count(.|$ns2) != count($ns2)]&quot;/&gt;</code></pre>\\n      </div>\\n<p>Пример:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;?xml version=&quot;1.0&quot;?&gt;\\n&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;\\n                xmlns:data=&quot;crane&quot; version=&quot;1.0&quot;&gt;\\n    &lt;xsl:output method=&quot;text&quot;/&gt;\\n    &lt;data:data&gt; &lt;!--data source for testing purposes--&gt;\\n        &lt;item&gt;1&lt;/item&gt;&lt;item&gt;2&lt;/item&gt;&lt;item&gt;3&lt;/item&gt;\\n        &lt;item&gt;4&lt;/item&gt;&lt;item&gt;5&lt;/item&gt;&lt;item&gt;6&lt;/item&gt;\\n    &lt;/data:data&gt;\\n\\n    &lt;xsl:template match=&quot;/&quot;&gt; &lt;!--root rule--&gt;\\n        &lt;xsl:variable name=&quot;ns1&quot; select=&quot;//item[position()&gt;1]&quot;/&gt;\\n        &lt;xsl:variable name=&quot;ns2&quot; select=&quot;//item[position()&amp;lt;5]&quot;/&gt;\\n\\n        &lt;xsl:for-each select=&quot;$ns1[count(.|$ns2)=count($ns2)]&quot;&gt;\\n            Intersection: &lt;xsl:value-of select=&quot;.&quot;/&gt;\\n        &lt;/xsl:for-each&gt;\\n\\n        &lt;xsl:for-each select=&quot;(\\n                        $ns1[count(.|$ns2)!=count($ns2)] |\\n                        $ns2[count(.|$ns1)!=count($ns1)]\\n                        )&quot;&gt;\\n            Difference: &lt;xsl:value-of select=&quot;.&quot;/&gt;\\n        &lt;/xsl:for-each&gt;\\n    &lt;/xsl:template&gt;\\n&lt;/xsl:stylesheet&gt;</code></pre>\\n      </div>\\n<p>Результат:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Intersection: 2\\nIntersection: 3\\nIntersection: 4\\nDifference: 1\\nDifference: 5\\nDifference: 6</code></pre>\\n      </div>\\n<h3>Метод Вендела Пая для нерекурсивного цикла</h3>\\n<p>Метод Вендела Пая (Wendell Pie) демонстрирует способ избежать XSLT-рекурсии при\\nприменении циклов.</p>\\n<p>Пример:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xml\\\">\\n      <pre class=\\\"language-xml\\\"><code class=\\\"language-xml\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Tag</span> <span class=\\\"token attr-name\\\">ID</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>1<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Value</span><span class=\\\"token punctuation\\\">></span></span>4<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Value</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Tag</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Tag</span> <span class=\\\"token attr-name\\\">ID</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>2<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Value</span><span class=\\\"token punctuation\\\">></span></span>2<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Value</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>Tag</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>Требующийся результат:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"html\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TABLE</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TR</span> <span class=\\\"token attr-name\\\">ID</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>1<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TD</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TD</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TD</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TD</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TD</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TD</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TD</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TD</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TR</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TABLE</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TABLE</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TR</span> <span class=\\\"token attr-name\\\">ID</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>2<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TD</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TD</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TD</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TD</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TR</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>TABLE</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>Другими словами, я хочу создать набор новых узлов, количество которых основано\\nна значении Value, содержащемся в документе. Ниже я представляю маленькое\\nобобщение,  которое не  зависит от числа узлов в исходном XML-документе и\\nиспользует вместо этого число узлов в преобразовании:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;xsl:template match=&quot;TAG&quot;&gt;\\n&lt;TABLE&gt;\\n  &lt;TR ID=&quot;@ID&quot;&gt;\\n    &lt;xsl:for-each select=&quot;(document(&#39;&#39;)//*)[position() &amp;lt;= Value]&quot;&gt;\\n      &lt;TD&gt; &lt;/TD&gt;\\n    &lt;/xsl:for-each&gt;\\n  &lt;/TR&gt;\\n&lt;/TABLE&gt;\\n&lt;/xsl:template&gt;</code></pre>\\n      </div>\\n<p>Здесь используется количество элементов в преобразовании. Это количество будет\\nзначительно превышено, если мы будем проверять на разные типы узлов, например:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;xsl:for-each\\n  select=&quot;($st//node()| $st//@* | $st//namespace::*) [position() &amp;lt;= Value]&quot;&gt;</code></pre>\\n      </div>\\n<p>где <code class=\\\"language-text\\\">$st</code> определено как  <code class=\\\"language-text\\\">document(&#39;&#39;)</code>, то есть корневой узел преобразования.</p>\\n<h3>Метод условной выборки Оливера Беккера</h3>\\n<p>Воможность XPath выбирать список узлов, основываясь на сложных условиях, очень\\nмощная. Хотя ей недостаёт возможностей для определения строки как\\nпротивоположного набору узлов. Вам часто нужно использовать навороченную\\nxsl:choose конструкцию только чтобы определить, что-то вроде “в случае 1\\nиспользуй строку 1, в случае 2 - строку 2, …, в случае N - строку N.?</p>\\n<p>Во всех таких случаях нам нужен способ, который позволил бы нам определять в\\nXPath-выражении строку, которая зависит от условия или условий.</p>\\n<p>Теперь о том, как это сделать:<br/>\\nМы хотим получить XPath-выражение, которое возвращает строку, когда некоторое\\nзаданное условие истинно, и возвращает пустую строку, если это условие ложно.\\nМожно условиться, что true - это “1”, а false - это “0”. Но как подогнать “1” к\\nкакой-то строке? Какую функцию для работы со строкой мы могли бы использовать?\\n<em>substring()</em> кажется достаточно удобной. А вот и трюк: мы можем\\nиспользовать substring() только с двумя аргументами: substring(str, nOffset)\\nвозвратит остаток строки str, начинающийся с позиции nOffset.</p>\\n<p>В частности:<br/></p>\\n<ul>\\n<li><code class=\\\"language-text\\\">substring(str, 1)</code> возвращает целую строку</li>\\n<li><code class=\\\"language-text\\\">substring(str, [очень большое число])</code> возвратит пустую строку, если это\\nбольшое число гарантированно больше, чем длина строки.</li>\\n</ul>\\n<p>Таким образом, выражение, которое мы могли бы использовать, будет:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token function\\\">substring</span><span class=\\\"token punctuation\\\">(</span> str1<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">exp</span><span class=\\\"token punctuation\\\">(</span> условие <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">substring</span><span class=\\\"token punctuation\\\">(</span> str2<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">exp</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token function\\\">not</span><span class=\\\"token punctuation\\\">(</span>условие<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>и мы хотим, чтобы <code class=\\\"language-text\\\">exp(условие)</code> было 1, если условие истинное и Infinity, если\\nусловие ложное.</p>\\n<p>Мы выражаем exp(условие) так:<br/>\\n<code class=\\\"language-text\\\">1 div условие</code>, потому что булево значение сначала преобразуется в число (true</p>\\n<ul>\\n<li>в 1, а false - в 0), мы получим в точности:</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token function\\\">exp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n<span class=\\\"token function\\\">exp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> Infinity</code></pre>\\n      </div>\\n<p>Итог:<br/>\\nXPath-выражение, возвращающее одну строку, если условие истинно и другую, если\\nоно ложно, такое:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"java\\\">\\n      <pre class=\\\"language-java\\\"><code class=\\\"language-java\\\"><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token function\\\">substring</span><span class=\\\"token punctuation\\\">(</span>Str1<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span> div условие<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">substring</span><span class=\\\"token punctuation\\\">(</span>Str2<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span> div условие<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Впервые это было использовано Оливером Беккером (Oliver Becker) и названо как\\nметод Беккера.</p>\\n<p>Например:<br/>\\nЯ хочу написать темплейт, который создаёт текст: “My department”,  если передан\\nпараметр “IT” и текст “Some other department”, если значение параметра другое.</p>\\n<p>Конечно, никаких <code class=\\\"language-text\\\">xsl:if</code> или <code class=\\\"language-text\\\">xsl:when</code> не допускается.</p>\\n<p>Пример кода:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;?xml version=&quot;1.0&quot;?&gt;\\n&lt;xsl:stylesheet xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;\\n                xmlns:data=&quot;crane&quot; version=&quot;1.0&quot;&gt;\\n\\n  &lt;xsl:output method=&quot;text&quot;/&gt;\\n\\n  &lt;xsl:template match=&quot;/&quot;&gt;\\n    IT:\\n    &lt;xsl:call-template name=&quot;whoIs&quot;&gt;\\n      &lt;xsl:with-param name=&quot;department&quot; select=&quot;&#39;IT&#39;&quot; /&gt;\\n    &lt;/xsl:call-template&gt;\\n    &lt;br/&gt;\\n    Finance:\\n    &lt;xsl:call-template name=&quot;whoIs&quot;&gt;\\n      &lt;xsl:with-param name=&quot;department&quot; select=&quot;&#39;Finance&#39;&quot; /&gt;\\n    &lt;/xsl:call-template&gt;\\n  &lt;/xsl:template&gt;\\n\\n  &lt;xsl:template name=&quot;whoIs&quot;&gt;\\n    &lt;xsl:param name=&quot;department&quot; select=&quot;someDepartment&quot; /&gt;\\n    &lt;br/&gt;\\n    &lt;xsl:value-of select=&quot;\\n      concat(\\n        substring(&#39;My department&#39;, 1 div ($department = &#39;IT&#39;)),\\n        substring(&#39;Some other department&#39;, 1 div not(($department = &#39;IT&#39;)))\\n      )&quot; /&gt;\\n    &lt;br/&gt;\\n  &lt;/xsl:template&gt;\\n&lt;/xsl:stylesheet&gt;</code></pre>\\n      </div>\\n<h3>Используйте метод Мюнха для группировки</h3>\\n<p>Группировка часто плохо осуществляется в XSL. Обычно эта задача возникает, когда\\nвы получаете XML-вывод (несгруппированный) из базы данных и должны сгруппировать\\nего средствами XSL. База данных обычно выдаёт вам результаты, структурированные\\nсогласно записям в ней. Например, давайте рассмотрим таблицу служащих, из\\nкоторой получается такой XML:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xml\\\">\\n      <pre class=\\\"language-xml\\\"><code class=\\\"language-xml\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>data</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>employee</span> <span class=\\\"token attr-name\\\">no</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>1<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>name</span><span class=\\\"token punctuation\\\">></span></span>Prathit Bondre<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>name</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>department</span><span class=\\\"token punctuation\\\">></span></span>IT<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>department</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>employee</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>employee</span> <span class=\\\"token attr-name\\\">no</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>2<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>name</span><span class=\\\"token punctuation\\\">></span></span>Adheet Bondre<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>name</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>department</span><span class=\\\"token punctuation\\\">></span></span>Finance<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>department</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>employee</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>employee</span> <span class=\\\"token attr-name\\\">no</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>3<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>name</span><span class=\\\"token punctuation\\\">></span></span>Sinan Edil<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>name</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>department</span><span class=\\\"token punctuation\\\">></span></span>IT<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>department</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>employee</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>employee</span> <span class=\\\"token attr-name\\\">no</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>4<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>name</span><span class=\\\"token punctuation\\\">></span></span>Jeremy King<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>name</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>department</span><span class=\\\"token punctuation\\\">></span></span>Finance<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>department</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>employee</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>data</span><span class=\\\"token punctuation\\\">></span></span></code></pre>\\n      </div>\\n<p>Требуется такой вывод:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">&lt;strong&gt;Finance&lt;/strong&gt;\\nAdheet Bondre\\nJeremy King\\n\\n&lt;strong&gt;IT&lt;/strong&gt;\\nPrathit Bondre\\nSinan Edil</code></pre>\\n      </div>\\n<p>Задача состоит в том, чтобы превратить этот плоский вывод в список,\\nсгруппированный по департаментам, чтобы дать требуемый результат, который\\nпоказан выше.</p>\\n<p>Есть два шага на пути к решению:</p>\\n<ul>\\n<li>Узнать, какие департаменты существуют</li>\\n<li>Получить всех служащих, которые относятся к одному департаменту</li>\\n</ul>\\n<p>Узнать, какие департаменты существуют, можно выбрав по одному сотруднику из\\nкаждого департамента в XML, который может с успехом быть первым, кто попадётся.\\nОдин способ найти их - это взять тех сотрудников, которые не относятся к\\nдепартаменту из множества департаментов предыдущих сотрудников.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">employee[not(department = preceding-sibling::employee/department)]</code></pre>\\n      </div>\\n<p>Определив таких сотрудников, легко найти их департаменты и собрать вместе всех\\nсотрудников из одного и того же департамента:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;xsl:apply-template\\n  select=&quot;data/employee[department = current()/department]&quot;/&gt;</code></pre>\\n      </div>\\n<p>Проблема этого метода в том, что он включает в себя два XPath-выражения,\\nвычисление которых потребует много ресурсов для больших XML-документов. Поиск по\\nвсем предыдущим братьям с осью ‘preceding-sibling’ занимает много времени, если\\nвы ближе к конце записей. Кроме того, получение всех контактов определённых\\nдепартаментов каждый раз включает в себя поиск одного сотрудника.</p>\\n<h4>Метод Мюнха</h4>\\n<p>Этот метод разработан Стивом Мюнхом (Steve Muench) для представления этих\\nфункций более эффективным способом с использованием ключей. Ключи работают путём\\nназначения значения ключа узлу и дают прямой доступ к узлу через такое значение.\\nЕсли элементов, у которых один и тот же ключ, много, то все эти элементы\\nнайдутся, когда вы воспользуетесь этим ключом. В сущности, это означает, что\\nесли вы хотите сгруппировать множество узлов согласно какому-то свойству узла,\\nвы можете использовать ключи.</p>\\n<p>В примере выше мы хотим сгруппировать сотрудников согласно их департаментам,\\nпоэтому мы создаём ключ, который назначает каждому сотруднику значение ключа,\\nкоторое берётся из департамента этого сотрудника. Узлы, которые мы хотим\\nсгруппировать должны быть подставлены в атрибут “match”. Значение ключа, которые\\nмы хотим использовать записывается в атрибут “use”.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;xsl:key name=&quot;employees-by-department&quot; match=&quot;employee&quot; use=&quot;department&quot;/&gt;</code></pre>\\n      </div>\\n<p>Однажды определив ключ, зная департамент, мы можем быстро получить доступ ко\\nвсем сотрудникам этого департамента.<br/>\\nНапример, ключ <code class=\\\"language-text\\\">key(&#39;employees-by-department&#39;, &#39;IT&#39;)</code> даст записи с\\nдепартаментом “IT”.</p>\\n<p>Однако, первое, что нам надо сделать,- это определить, какие бывают\\nдепартаменты, что включает в себя нахождение первого сотрудника в XML для\\nкаждого департамента. Здесь мы снова можем использовать ключи. Мы знаем, что\\nсотрудник будет частью списка узлов, которые можно получить по ключу данного\\nдепартамента: вопрос в том, будет ли он первым в этом списке (который упорядочен\\nкак записи в XML-документе) или ниже? Нас интересуют только записи, идущие\\nпервыми в списке.<br/>\\nВыяснение, является ли сотрудник первым в списке, возвращённом по ключу,\\nподразумевает сравнение узла employee с первым узлом в списке. Этот способ также\\nможет быть использован для получения отдельных элементов в XML-файле. Есть пара\\nхарактерных способов проверки, идентичны ли два узла:</p>\\n<ul>\\n<li>Сравнить уникальные идентификаторы, сгенерированные для узлов (используя\\n<code class=\\\"language-text\\\">generate-id()</code>):</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">employee[generate-id() = generate-id(key(&#39;employees-by-department&#39;, department)[1])]</code></pre>\\n      </div>\\n<ul>\\n<li>Посмотреть, сколько узлов включает в себя результат объединения двух узлов:\\nодин или два - узлы не могут повторяться во множестве, так что если там\\nтолько один узел, то они должны быть одним и тем же узлом:</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">employee[count(.|key(&#39;employees-by-department&#39;, department)[1]) = 1]</code></pre>\\n      </div>\\n<p>Однажды определив группы, вы можете отсортировать их так, как вам нравится.\\nТакже вы можете отсортировать узлы в рамках группы так, как вы хотите. Вот\\nшаблон, который создаёт результат, который мы описали, из XML, полученного из\\nбазы данных:</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;?xml version=&quot;1.0&quot;?&gt;\\n&lt;xsl:stylesheet version=&quot;1.0&quot;\\n  xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;\\n\\n  &lt;xsl:output method = &quot;html&quot; encoding=&quot;Windows-1252&quot; /&gt;\\n  &lt;xsl:key name = &quot;employees-by-department&quot; match =&quot;employee&quot; use = &quot;department&quot; /&gt;\\n\\n  &lt;xsl:template match=&quot;data&quot;&gt;\\n    &lt;html&gt;\\n      &lt;head&gt;&lt;/head&gt;\\n      &lt;body&gt;\\n        &lt;xsl:for-each select = &quot;employee[count(.|key(&#39;employees-bydepartment&#39;,\\ndepartment)[1])=1]&quot;&gt;\\n          &lt;xsl:sort select=&quot;department&quot; /&gt;\\n          &lt;b&gt;&lt;u&gt;&lt;xsl:value-of select=&quot;department&quot; /&gt;&lt;/u&gt;&lt;/b&gt;&lt;br/&gt;\\n            &lt;xsl:for-each select=&quot;key(&#39;employees-bydepartment&#39;,\\ndepartment)&quot;&gt;\\n              &lt;xsl:sort select=&quot;name&quot;/&gt;\\n              &lt;xsl:value-of select=&quot;name&quot; /&gt;&lt;br/&gt;\\n            &lt;/xsl:for-each&gt;\\n          &lt;/xsl:for-each&gt;\\n        &lt;/body&gt;\\n      &lt;/html&gt;\\n  &lt;/xsl:template&gt;\\n\\n&lt;/xsl:stylesheet&gt;</code></pre>\\n      </div>\\n<p>Метод Мюнха обычно лучше использовать для группировки узлов из XML-документа,\\nпотому что он не подразумевает прохождения через большое число узлов, и поэтому\\nон более эффективен. Он особенно полезен, когда у вас есть плоская выдача из\\nбазы данных, например, которую вам нужно преобразовать в какую-нибудь\\nиерархичную структуру. Он может быть применён в любой ситуации, где нужно\\nгруппировать узлы согласно их свойствам, которые можно получить через\\nXPath.</p>\\n<p>Обратная сторона состоит в том, что метод Мюнха будет работать только с\\nXSLT-процессором, поддерживающим ключи. Вдобавок, использование ключей может\\nбыть достаточно затратным по памяти, потому что все узлы и их ключи хранятся в\\nпамяти. Наконец, может быть трудно использовать ключи, если узлы, которые вы\\nхотите сгруппировать, получены из разных подключенных источников.</p>\\n<h2>Использование xsl:import</h2>\\n<p>Используйте <code class=\\\"language-text\\\">&lt;xsl:import&gt;</code>, чтобы подключить общие, основные правила в\\nпреобразование, задуманное для определённых трансформаций. Если можете, не\\nимпортируйте больше шаблонов, чем вам нужно.</p>\\n<h2>Использование статического HTML</h2>\\n<p>Для любых “неизменных” порций html на странице (таких как шапка, подвал,\\nэлементы навигации) определённо более эффективно хранить фрагменты как внешние\\nxml-файлы и копировать их в результирующее дерево используя <code class=\\\"language-text\\\">xsl:copy-of</code> и\\nфункцию <code class=\\\"language-text\\\">document()</code>, чем использовать именованные шаблоны или <code class=\\\"language-text\\\">xsl:import</code>.</p>\\n<h2>Разница между call и apply templates</h2>\\n<p>Call-template, в отличие от aplly-templates, не меняет контекстный (текущий)\\nузел. И атрибут select имеет значение только в aplly-templates, и не имеет в\\ncall-template.</p>\\n<h2>Повторное использование кода и рефакторинг</h2>\\n<p>Проблема с использованием одного темплейта с множеством условий - это то, что\\nочень быстро делает код отвратительным, нечитаемым и неподддерживаемым. Проблема\\nмногих шаблонов состоит в том, что вы часто дублируете код. Золотая середина -\\nиспользовать много шаблонов, а при необходимости повторить код - вызывать\\nименованные шаблоны, иногда с параметрами, если имеют место небольшие изменения,\\nкоторые должны быть учтены. Именованные шаблоны похожи на подпрограммы или\\nприватные методы.</p>\\n<p>Например. Допустим, вы хотите обработать элементы item, имея один шаблон для\\nузлов со значением атрибута type - ‘Book’, один - для ‘CD’, и один для всех\\nостальных.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;xsl:template match=&quot;item[@type=&#39;Book&#39;]&quot;/&gt;\\n&lt;xsl:template match=&quot;item[@type=&#39;CD&#39;]&quot;/&gt;\\n&lt;xsl:template match=&quot;item&quot;/&gt;</code></pre>\\n      </div>\\n<p>И они переопределят шаблон, привязанный к ”*” (любой элемент). Шаблоны с более\\nточной адресацией будут иметь более высокий приоритет для сопоставления.</p>\\n<h2>Автоматизируйте XSL-документацию</h2>\\n<p>Программисты обычно ненавидят документацию и поэтому обычно не пишут её.\\nJavadocs в Java даёт большое утешение программистскому сообществу, обеспечивая\\nспособ автоматически генерировать документацию. Есть похожий инструмент, который\\nнаписан для XSL и называется xsldoc. Его можно бесплатно скачать на\\n<a href=\\\"http://www.xsldoc.org/\\\">www.xsldoc.org</a>.</p>\\n<p>Этот инструмент обеспечит автоматизированный, стандартизированный и надежный\\nспособ создания документации о ваших XSL-файлах, и поскольку он управляется из\\nкомандной строки, то может стать частью процесса сборки.</p>\\n<h2>Не изобретайте велосипед, используйте XSLT-библиотеку</h2>\\n<p>XSLT-библиотека - это open source репозиторий XSL-шаблонов, которые были\\nнаписаны и проверены. В библиотеке множество шаблонов для работы со строками,\\nдатами, обработки узлов и т.п., что может быть эффективно использовано в ваших\\nxsl-файлах. Так что сэкономьте своё время с этой библиотекой. Её можно\\nпосмотреть по адресу <a href=\\\"http://xsltsl.sourceforge.net\\\">http://xsltsl.sourceforge.net</a>.</p>\\n<h2>Уменьшайте размер ваших HTML-документов</h2>\\n<p>Уменьшайте размер вашего HTML, используя <code class=\\\"language-text\\\">indent=&quot;no&quot;</code> в теге\\n<code class=\\\"language-text\\\">&lt;xsl:output/&gt;</code>. Этот атрибут сообщает XSLT-процессору не делать отступы в\\nHTML-документе, что делает файлы меньше и они грузятся быстрее.</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"xslt\\\">\\n      <pre class=\\\"language-xslt\\\"><code class=\\\"language-xslt\\\">&lt;xsl:output method=&quot;html&quot; indent=&quot;no&quot;/&gt;</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"ru/posts/efficient_xslt_techniques/\",\"prefix\":\"\",\"disqusIdentifier\":\"ru-posts-efficient_xslt_techniques\"},\"frontmatter\":{\"title\":\"XSLT - результативные технологии программирования\",\"date\":\"25 July 2009\",\"v2\":null,\"old\":true,\"tumblr\":null,\"meta\":null,\"cover\":null}},\"authornote\":{\"id\":\"/Users/varya/WebDev/Personal/varya.github.com/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><strong>Mr. Gatsby</strong> Proin ornare ligula eu tellus tempus elementum. Aenean <a href=\\\"/\\\">bibendum</a> iaculis mi, nec blandit lacus interdum vitae. Vestibulum non nibh risus, a scelerisque purus. Blandit lacus interdum vitae. Vestibulum non nibh risus, a scelerisque purus.</p>\"},\"site\":{\"siteMetadata\":{\"siteUrl\":\"http://varya.me/\"}}},\"pathContext\":{\"slug\":\"ru/posts/efficient_xslt_techniques/\",\"prev\":{\"id\":\"/Users/varya/WebDev/Personal/varya.github.com/content/posts/first-steroids-app/index_ru.md absPath of file >>> MarkdownRemark\",\"fields\":{\"slug\":\"ru/posts/first-steroids-app/\",\"prefix\":\"\",\"lang\":\"ru\",\"disqusIdentifier\":\"ru-posts-first-steroids-app\"},\"frontmatter\":{\"title\":\"Мобильное приложение на Steroids\"}},\"next\":{\"id\":\"/Users/varya/WebDev/Personal/varya.github.com/content/posts/docpad-with-bem-taste/index_en.md absPath of file >>> MarkdownRemark\",\"fields\":{\"slug\":\"en/posts/docpad-with-bem-taste/\",\"prefix\":\"\",\"lang\":\"en\",\"disqusIdentifier\":\"posts-docpad-with-bem-taste-index-en\"},\"frontmatter\":{\"title\":\"Docpad with the taste of BEM\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/ru-posts-efficient-xslt-techniques.json\n// module id = 664\n// module chunks = 183095330657117"],"sourceRoot":""}
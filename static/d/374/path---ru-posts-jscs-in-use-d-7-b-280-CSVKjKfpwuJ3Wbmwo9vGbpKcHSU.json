{"data":{"post":{"id":"307f70cf-c744-58e7-88e9-34dffd2abc6f","html":"<p>Хочу поделиться опытом поддержания единого стиля JavaScript в одном из своих проектов. Недавно мы решили пробовать\nмолодой инструмент JSCS, и результат его использования понравился всем членам команды.\n<excerpt/></p>\n<p>Когда я присоединилась к проекту <a href=\"http://styleguide.sc5.io/\">SC5 Styleguide</a>, мне сразу бросилось в глаза отсутствие\nединого стиля для JavaScript кода. Это ещё не было ужасающим, но было ясно, что проект в скором времени будет расти и чем раньше мы начнём\nприлагать усилия к соблюдению единого стиля, тем лучше. Тем более, я уже знала о существовании и особенностях JSCS,\nпотому что на одном из моих проектов <a href=\"http://frontendbabel.info/articles/jscs-javascript-code-style/\">публиковался перевод\nстатьи о нем</a>. Поэтому мы даже не стояли перед вопросом,\nкакой инструмент выбрать.</p>\n<p>Конечно, есть и другие решения. Чаще всего называют JSLint и JSHint. Но давайте я сначала расскажу вам одну историю.</p>\n<p>Оказывается, когда авторы JSHint познакомились с JSCS, он им так понравился, что они предпочли стать его\nконтрибьютерами, чем развивать проверку стиля в своём инструменте. А у себя оставили более сложные штуки, не про стиль,\nа про программирование.</p>\n<blockquote class=\"twitter-tweet\" lang=\"ru\"><p>And with that, JSCS now has all the style enforcement rules that are\nbeing dropped in <a href=\"https://twitter.com/JSHint\">@JSHint</a> 3.0: <a\nhref=\"https://t.co/W98EMSiTN5\">https://t.co/W98EMSiTN5</a> cc <a\nhref=\"https://twitter.com/valueof\">@valueof</a></p>&mdash; Mike Sherov (@mikesherov) <a\nhref=\"https://twitter.com/mikesherov/status/419596672520318976\">4 января 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>Получается, выбор стоит не между JSLint, JSHint и JSCS, а между JSLint и комбинацией JSHint + JSCS.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\">gulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jslint'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span> <span class=\"token string\">'jshint'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jscs'</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>А учитывая, что инструмент новый, со стройной архитектурой, контрибьютить в него будет одно удовольствие да и меньше\nшансов на слишком долгую жизнь багов из-за какого-нибудь непроходимого легаси.</p>\n<p>Вдохновляет также и тот факт, что JSCS уже выбрали такие уважаемые команды как разработчики jQuery, Bootsrap и\nAngularJS.</p>\n<p>Итак, JSCS — это npm-пакет, и установить его можно как глобально на свою машину так и локально на конкретный проект:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">npm install jscs</code></pre>\n      </div>\n<p>Кроме того, понадобится создать конфигурационный файл <code class=\"language-text\">.jscsrc</code> и там описать, какого стиля должен придерживаться\nJavaScript на вашем проекте. Этот файл помещается в корень проекта.</p>\n<p>Несмотря на большое количество правил, которые поддерживает JSCS, конфиг вряд ли будет большим, потому что в инструменте\nпредусмотрены пресеты. Популярных стилей для JavaScript кода не так много, и если вы выбрали один из них, то нет нужды\nописывать стиль полностью. Достаточно указать, на кого вы хотели бы быть похожим:</p>\n<ul>\n<li>airbnb</li>\n<li>crockford</li>\n<li>google</li>\n<li>jquery</li>\n<li>mdcs</li>\n<li>wikimedia</li>\n<li>yandex</li>\n</ul>\n<p>Даже если у вас есть расхождения с этими стилями, всё равно удобно выбрать максимально похожий пресет, потому что в JSCS\nвозможно переопределить правила пресета.</p>\n<p>И, конечно, важно, что инструмент уже достаточно зрелый. А значит, есть все необходимые дружественные пакеты и плагины\nдля разных редакторов.</p>\n<h2 id=\"как-это-было\"><a href=\"#%D0%BA%D0%B0%D0%BA-%D1%8D%D1%82%D0%BE-%D0%B1%D1%8B%D0%BB%D0%BE\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Как это было</h2>\n<p>В общем, учитывая все эти факты, мы остановились на JSCS. Начали с того, что написали подходящую нам конфигурацию и тут\nже исключили из списка для проверки все наши файлы. У проекта уже была модульная структура, поэтому это оказалось\nнесложным.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">{\n    ...\n\n    &quot;excludeFiles&quot;: [\n      &quot;node_modules/**&quot;,\n      &quot;src/modules/a/**&quot;,\n      &quot;src/modules/b/**&quot;,\n      &quot;src/*.js\n    ]\n}</code></pre>\n      </div>\n<p>Мы договорились, что начиная работать с каким-нибудь модулем, кроме реализации фич, мы также будем править стиль и\nвычеркивать исправленные модули из списка непроверяемых файлов. Соблюдая это, мы довольно быстро исправили все файлы и\nобошлись без конфликтов.</p>\n<p>Гораздо важнее оказалось поддержание исправленных файлов в их исправленном состоянии во время будуших правок. Конечно,\nтут нам помогают автоматические проверки. Но возникает вопрос, настолько строги мы должны быть в этих проверках и когда\nименно проверять. Ведь поддержка стиля не должна становиться самоцелью и должна перетягивать на себя весь фокус\nразработки.</p>\n<p>В итоге мы пришли к концепции раздения ответственности. Так, для основного репозитория мы выбрали жесткую политику\nв вопросе соблюдения стиля, а для форков — рекомендательную. Мы настроили Travis так, чтобы он проверял стиль для\nпул-реквестов. Если стиль не соблюден, пул-реквест не может быть влит в основной репозиторий. Таким образом, там вообще\nникогда нет кода с плохим стилем. В то же время для форков всё гораздо мягче. Мы отказались от насильственных pre-push\nхуков с проверкой стиля, но рекомендуем самостоятельную установку pre-commit хука и использование плагинов JSCS для\nредакторов, чтобы узнавать об ошибках в процессе разработки, а не тогда, когда ломается пул-реквест. Все рекомендации\nнаписаны у нас в разработческой документации, и новые члены команды активно ими пользуются.</p>\n<p>Всем особенно нравится, как реализована поддержка в редакторах. Ведь конфигурация стиля приезжает в репозиторий проекта\nвместе с кодом, и редактор считывает её самостоятельно. А, главное, у разных проектов может быть разный стиль, и для\nперекрестной работы не требуется никакая перенастройка.</p>\n<p><img src=\"http://varya.me/jscs-talk/pictures/sublime.gif\"></p>\n<p>Ну и, конечно, всегда есть возможность запустить проверку стиля вручную как gulp-таск.</p>\n<p><img src=\"http://varya.me/jscs-talk/pictures/travis.png\"></p>\n<h2 id=\"предостережения\"><a href=\"#%D0%BF%D1%80%D0%B5%D0%B4%D0%BE%D1%81%D1%82%D0%B5%D1%80%D0%B5%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Предостережения</h2>\n<p>Во время внедрения инструмента мы столкнулись с парочкой неудобств. Думаю, стоит о них упомянуть, тем более, что к ним\nнашлись решения.</p>\n<p>Основное расстройство — ошибка “out of memory” при запуске gulp-таска с проверкой. Оказалось, что недостаточно исключить\nфайлы в конфигурации JSCS. Gulp всё равно сначала пытается работать с ними всеми и пока дело доходит до JSCS, память уже\nкончается. В итоге мы пришли к использованию пакета <code class=\"language-text\">gulp-ignore</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">gulp.task(&#39;jscs&#39;, function() {\n  return gulp.src([\n    &#39;**/*.js&#39;\n  ])\n  .pipe(gulpIgnore.exclude([\n    &#39;node_modules/**&#39;,\n    &#39;demo-output/**&#39;\n  ]))\n  .pipe(jscs());\n})</code></pre>\n      </div>\n<p>Это не очень хорошее решение, ведь здесь пришлось перечислить все те исключения, которые уже задекларированы в <code class=\"language-text\">.jscsrc</code>.\nНо лучшего варианта у нас пока нет.</p>\n<p>И, второй момент: если вы используете watch в разработке, то скорее всего захотите видеть ошибки в терминале, но не\nпрерывать исполнение таска. Для этого потребуется <code class=\"language-text\">gulp-plumber</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">gulp.task(&#39;jscs&#39;, function() {\n  return gulp.src([\n    &#39;**/*.js&#39;\n  ])\n  ...\n  .pipe(plumber())\n  .pipe(jscs());\n});</code></pre>\n      </div>\n<p>Всё, больше никаких проблем или вопросов относительно иструмента у нас не было. Он прекрасно работает и уже сохранил нам\nтысячи человекочасов.</p>\n<h2 id=\"а-также\"><a href=\"#%D0%B0-%D1%82%D0%B0%D0%BA%D0%B6%D0%B5\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>А также</h2>\n<p>Возможно, вас также заинтересует <a href=\"http://habrahabr.ru/post/220229/\">рассказ автора JSCS</a> и мои\n<a href=\"http://varya.me/jscs-talk/\">слайды</a> от доклада на эту тему.</p>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Хочу поделиться опытом поддержания единого стиля JavaScript в одном из своих проектов. Недавно мы решили пробовать\nмолодой инструмент JSCS, и результат его использования понравился всем членам команды.\n"},{"type":"element","tagName":"excerpt","properties":{},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Когда я присоединилась к проекту "},{"type":"element","tagName":"a","properties":{"href":"http://styleguide.sc5.io/"},"children":[{"type":"text","value":"SC5 Styleguide"}]},{"type":"text","value":", мне сразу бросилось в глаза отсутствие\nединого стиля для JavaScript кода. Это ещё не было ужасающим, но было ясно, что проект в скором времени будет расти и чем раньше мы начнём\nприлагать усилия к соблюдению единого стиля, тем лучше. Тем более, я уже знала о существовании и особенностях JSCS,\nпотому что на одном из моих проектов "},{"type":"element","tagName":"a","properties":{"href":"http://frontendbabel.info/articles/jscs-javascript-code-style/"},"children":[{"type":"text","value":"публиковался перевод\nстатьи о нем"}]},{"type":"text","value":". Поэтому мы даже не стояли перед вопросом,\nкакой инструмент выбрать."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Конечно, есть и другие решения. Чаще всего называют JSLint и JSHint. Но давайте я сначала расскажу вам одну историю."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Оказывается, когда авторы JSHint познакомились с JSCS, он им так понравился, что они предпочли стать его\nконтрибьютерами, чем развивать проверку стиля в своём инструменте. А у себя оставили более сложные штуки, не про стиль,\nа про программирование."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{"className":["twitter-tweet"],"lang":"ru"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And with that, JSCS now has all the style enforcement rules that are\nbeing dropped in "},{"type":"element","tagName":"a","properties":{"href":"https://twitter.com/JSHint"},"children":[{"type":"text","value":"@JSHint"}]},{"type":"text","value":" 3.0: "},{"type":"element","tagName":"a","properties":{"href":"https://t.co/W98EMSiTN5"},"children":[{"type":"text","value":"https://t.co/W98EMSiTN5"}]},{"type":"text","value":" cc "},{"type":"element","tagName":"a","properties":{"href":"https://twitter.com/valueof"},"children":[{"type":"text","value":"@valueof"}]}]},{"type":"text","value":"— Mike Sherov (@mikesherov) "},{"type":"element","tagName":"a","properties":{"href":"https://twitter.com/mikesherov/status/419596672520318976"},"children":[{"type":"text","value":"4 января 2014"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"script","properties":{"async":true,"src":"//platform.twitter.com/widgets.js","charSet":"utf-8"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Получается, выбор стоит не между JSLint, JSHint и JSCS, а между JSLint и комбинацией JSHint + JSCS."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"js"},"children":[{"type":"text","value":"\n      "},{"type":"element","tagName":"pre","properties":{"className":["language-js"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"gulp"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"task"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"'jslint'"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"'jshint'"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"'jscs'"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"А учитывая, что инструмент новый, со стройной архитектурой, контрибьютить в него будет одно удовольствие да и меньше\nшансов на слишком долгую жизнь багов из-за какого-нибудь непроходимого легаси."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Вдохновляет также и тот факт, что JSCS уже выбрали такие уважаемые команды как разработчики jQuery, Bootsrap и\nAngularJS."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Итак, JSCS — это npm-пакет, и установить его можно как глобально на свою машину так и локально на конкретный проект:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"text","value":"\n      "},{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"npm install jscs"}]}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Кроме того, понадобится создать конфигурационный файл "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":".jscsrc"}]},{"type":"text","value":" и там описать, какого стиля должен придерживаться\nJavaScript на вашем проекте. Этот файл помещается в корень проекта."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Несмотря на большое количество правил, которые поддерживает JSCS, конфиг вряд ли будет большим, потому что в инструменте\nпредусмотрены пресеты. Популярных стилей для JavaScript кода не так много, и если вы выбрали один из них, то нет нужды\nописывать стиль полностью. Достаточно указать, на кого вы хотели бы быть похожим:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"airbnb"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"crockford"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"google"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"jquery"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"mdcs"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"wikimedia"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"yandex"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Даже если у вас есть расхождения с этими стилями, всё равно удобно выбрать максимально похожий пресет, потому что в JSCS\nвозможно переопределить правила пресета."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"И, конечно, важно, что инструмент уже достаточно зрелый. А значит, есть все необходимые дружественные пакеты и плагины\nдля разных редакторов."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"как-это-было"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%D0%BA%D0%B0%D0%BA-%D1%8D%D1%82%D0%BE-%D0%B1%D1%8B%D0%BB%D0%BE","ariaHidden":true,"className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Как это было"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"В общем, учитывая все эти факты, мы остановились на JSCS. Начали с того, что написали подходящую нам конфигурацию и тут\nже исключили из списка для проверки все наши файлы. У проекта уже была модульная структура, поэтому это оказалось\nнесложным."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"text","value":"\n      "},{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"{\n    ...\n\n    \"excludeFiles\": [\n      \"node_modules/**\",\n      \"src/modules/a/**\",\n      \"src/modules/b/**\",\n      \"src/*.js\n    ]\n}"}]}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Мы договорились, что начиная работать с каким-нибудь модулем, кроме реализации фич, мы также будем править стиль и\nвычеркивать исправленные модули из списка непроверяемых файлов. Соблюдая это, мы довольно быстро исправили все файлы и\nобошлись без конфликтов."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Гораздо важнее оказалось поддержание исправленных файлов в их исправленном состоянии во время будуших правок. Конечно,\nтут нам помогают автоматические проверки. Но возникает вопрос, настолько строги мы должны быть в этих проверках и когда\nименно проверять. Ведь поддержка стиля не должна становиться самоцелью и должна перетягивать на себя весь фокус\nразработки."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"В итоге мы пришли к концепции раздения ответственности. Так, для основного репозитория мы выбрали жесткую политику\nв вопросе соблюдения стиля, а для форков — рекомендательную. Мы настроили Travis так, чтобы он проверял стиль для\nпул-реквестов. Если стиль не соблюден, пул-реквест не может быть влит в основной репозиторий. Таким образом, там вообще\nникогда нет кода с плохим стилем. В то же время для форков всё гораздо мягче. Мы отказались от насильственных pre-push\nхуков с проверкой стиля, но рекомендуем самостоятельную установку pre-commit хука и использование плагинов JSCS для\nредакторов, чтобы узнавать об ошибках в процессе разработки, а не тогда, когда ломается пул-реквест. Все рекомендации\nнаписаны у нас в разработческой документации, и новые члены команды активно ими пользуются."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Всем особенно нравится, как реализована поддержка в редакторах. Ведь конфигурация стиля приезжает в репозиторий проекта\nвместе с кодом, и редактор считывает её самостоятельно. А, главное, у разных проектов может быть разный стиль, и для\nперекрестной работы не требуется никакая перенастройка."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"http://varya.me/jscs-talk/pictures/sublime.gif"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Ну и, конечно, всегда есть возможность запустить проверку стиля вручную как gulp-таск."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"http://varya.me/jscs-talk/pictures/travis.png"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"предостережения"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%D0%BF%D1%80%D0%B5%D0%B4%D0%BE%D1%81%D1%82%D0%B5%D1%80%D0%B5%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F","ariaHidden":true,"className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Предостережения"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Во время внедрения инструмента мы столкнулись с парочкой неудобств. Думаю, стоит о них упомянуть, тем более, что к ним\nнашлись решения."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Основное расстройство — ошибка “out of memory” при запуске gulp-таска с проверкой. Оказалось, что недостаточно исключить\nфайлы в конфигурации JSCS. Gulp всё равно сначала пытается работать с ними всеми и пока дело доходит до JSCS, память уже\nкончается. В итоге мы пришли к использованию пакета "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"gulp-ignore"}]},{"type":"text","value":":"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"text","value":"\n      "},{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"gulp.task('jscs', function() {\n  return gulp.src([\n    '**/*.js'\n  ])\n  .pipe(gulpIgnore.exclude([\n    'node_modules/**',\n    'demo-output/**'\n  ]))\n  .pipe(jscs());\n})"}]}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Это не очень хорошее решение, ведь здесь пришлось перечислить все те исключения, которые уже задекларированы в "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":".jscsrc"}]},{"type":"text","value":".\nНо лучшего варианта у нас пока нет."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"И, второй момент: если вы используете watch в разработке, то скорее всего захотите видеть ошибки в терминале, но не\nпрерывать исполнение таска. Для этого потребуется "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"gulp-plumber"}]},{"type":"text","value":":"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"text","value":"\n      "},{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"gulp.task('jscs', function() {\n  return gulp.src([\n    '**/*.js'\n  ])\n  ...\n  .pipe(plumber())\n  .pipe(jscs());\n});"}]}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Всё, больше никаких проблем или вопросов относительно иструмента у нас не было. Он прекрасно работает и уже сохранил нам\nтысячи человекочасов."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"а-также"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%D0%B0-%D1%82%D0%B0%D0%BA%D0%B6%D0%B5","ariaHidden":true,"className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"А также"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Возможно, вас также заинтересует "},{"type":"element","tagName":"a","properties":{"href":"http://habrahabr.ru/post/220229/"},"children":[{"type":"text","value":"рассказ автора JSCS"}]},{"type":"text","value":" и мои\n"},{"type":"element","tagName":"a","properties":{"href":"http://varya.me/jscs-talk/"},"children":[{"type":"text","value":"слайды"}]},{"type":"text","value":" от доклада на эту тему."}]}],"data":{"quirksMode":false}},"fields":{"slug":"ru/posts/jscs-in-use/","prefix":"","disqusIdentifier":"posts-jscs-in-use-index-ru"},"frontmatter":{"title":"Использование JSCS","subTitle":null,"date":"25 November 2014","v2":true,"old":null,"tumblr":null,"meta":null,"cover":null}},"authornote":null,"site":{"siteMetadata":{"siteUrl":"http://varya.me/"}}},"pageContext":{"slug":"ru/posts/jscs-in-use/","prev":{"id":"2ef310e1-2c9a-5738-a51a-60eb7973ee9f","fileAbsolutePath":"/Users/varya/WebDev/Personal/varya.github.com/content/posts/react-hackathon-materials/index_en.md","fields":{"slug":"en/posts/react-hackathon-materials/","prefix":"","lang":"en","disqusIdentifier":"posts-react-hackathon-materials-index-en","level":1},"frontmatter":{"title":"Materials for your React hackathon","subTitle":null,"v2":true,"old":null}},"next":{"id":"d4ed3fd8-a034-55a8-b897-f087dff87508","fileAbsolutePath":"/Users/varya/WebDev/Personal/varya.github.com/content/posts/javascript-component-solutions/index_en.md","fields":{"slug":"en/posts/javascript-component-solutions/","prefix":"","lang":"en","disqusIdentifier":"en-issues-javascript-component-solutions","level":1},"frontmatter":{"title":"JavaScript components low basics","subTitle":null,"v2":null,"old":true}}}}